//
// File generated by rootcint at Sat May  7 07:58:42 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME eventdict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "eventdict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MyJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyJet(void *p = 0);
   static void *newArray_MyJet(Long_t size, void *p);
   static void delete_MyJet(void *p);
   static void deleteArray_MyJet(void *p);
   static void destruct_MyJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyJet*)
   {
      ::MyJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyJet", ::MyJet::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyJet.h", 12,
                  typeid(::MyJet), DefineBehavior(ptr, ptr),
                  &::MyJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyJet) );
      instance.SetNew(&new_MyJet);
      instance.SetNewArray(&newArray_MyJet);
      instance.SetDelete(&delete_MyJet);
      instance.SetDeleteArray(&deleteArray_MyJet);
      instance.SetDestructor(&destruct_MyJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyJet*)
   {
      return GenerateInitInstanceLocal((::MyJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyMET_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyMET(void *p = 0);
   static void *newArray_MyMET(Long_t size, void *p);
   static void delete_MyMET(void *p);
   static void deleteArray_MyMET(void *p);
   static void destruct_MyMET(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyMET*)
   {
      ::MyMET *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyMET >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyMET", ::MyMET::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyMET.h", 13,
                  typeid(::MyMET), DefineBehavior(ptr, ptr),
                  &::MyMET::Dictionary, isa_proxy, 4,
                  sizeof(::MyMET) );
      instance.SetNew(&new_MyMET);
      instance.SetNewArray(&newArray_MyMET);
      instance.SetDelete(&delete_MyMET);
      instance.SetDeleteArray(&deleteArray_MyMET);
      instance.SetDestructor(&destruct_MyMET);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyMET*)
   {
      return GenerateInitInstanceLocal((::MyMET*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyMET*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyTrack(void *p = 0);
   static void *newArray_MyTrack(Long_t size, void *p);
   static void delete_MyTrack(void *p);
   static void deleteArray_MyTrack(void *p);
   static void destruct_MyTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyTrack*)
   {
      ::MyTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyTrack", ::MyTrack::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyTrack.h", 12,
                  typeid(::MyTrack), DefineBehavior(ptr, ptr),
                  &::MyTrack::Dictionary, isa_proxy, 4,
                  sizeof(::MyTrack) );
      instance.SetNew(&new_MyTrack);
      instance.SetNewArray(&newArray_MyTrack);
      instance.SetDelete(&delete_MyTrack);
      instance.SetDeleteArray(&deleteArray_MyTrack);
      instance.SetDestructor(&destruct_MyTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyTrack*)
   {
      return GenerateInitInstanceLocal((::MyTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyVertex(void *p = 0);
   static void *newArray_MyVertex(Long_t size, void *p);
   static void delete_MyVertex(void *p);
   static void deleteArray_MyVertex(void *p);
   static void destruct_MyVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyVertex*)
   {
      ::MyVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyVertex", ::MyVertex::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyVertex.h", 12,
                  typeid(::MyVertex), DefineBehavior(ptr, ptr),
                  &::MyVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MyVertex) );
      instance.SetNew(&new_MyVertex);
      instance.SetNewArray(&newArray_MyVertex);
      instance.SetDelete(&delete_MyVertex);
      instance.SetDeleteArray(&deleteArray_MyVertex);
      instance.SetDestructor(&destruct_MyVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyVertex*)
   {
      return GenerateInitInstanceLocal((::MyVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyElectron_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyElectron(void *p = 0);
   static void *newArray_MyElectron(Long_t size, void *p);
   static void delete_MyElectron(void *p);
   static void deleteArray_MyElectron(void *p);
   static void destruct_MyElectron(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyElectron*)
   {
      ::MyElectron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyElectron >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyElectron", ::MyElectron::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyElectron.h", 12,
                  typeid(::MyElectron), DefineBehavior(ptr, ptr),
                  &::MyElectron::Dictionary, isa_proxy, 4,
                  sizeof(::MyElectron) );
      instance.SetNew(&new_MyElectron);
      instance.SetNewArray(&newArray_MyElectron);
      instance.SetDelete(&delete_MyElectron);
      instance.SetDeleteArray(&deleteArray_MyElectron);
      instance.SetDestructor(&destruct_MyElectron);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyElectron*)
   {
      return GenerateInitInstanceLocal((::MyElectron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyElectron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyMuon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyMuon(void *p = 0);
   static void *newArray_MyMuon(Long_t size, void *p);
   static void delete_MyMuon(void *p);
   static void deleteArray_MyMuon(void *p);
   static void destruct_MyMuon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyMuon*)
   {
      ::MyMuon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyMuon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyMuon", ::MyMuon::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyMuon.h", 13,
                  typeid(::MyMuon), DefineBehavior(ptr, ptr),
                  &::MyMuon::Dictionary, isa_proxy, 4,
                  sizeof(::MyMuon) );
      instance.SetNew(&new_MyMuon);
      instance.SetNewArray(&newArray_MyMuon);
      instance.SetDelete(&delete_MyMuon);
      instance.SetDeleteArray(&deleteArray_MyMuon);
      instance.SetDestructor(&destruct_MyMuon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyMuon*)
   {
      return GenerateInitInstanceLocal((::MyMuon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyMuon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyTau_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyTau(void *p = 0);
   static void *newArray_MyTau(Long_t size, void *p);
   static void delete_MyTau(void *p);
   static void deleteArray_MyTau(void *p);
   static void destruct_MyTau(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyTau*)
   {
      ::MyTau *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyTau >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyTau", ::MyTau::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyTau.h", 14,
                  typeid(::MyTau), DefineBehavior(ptr, ptr),
                  &::MyTau::Dictionary, isa_proxy, 4,
                  sizeof(::MyTau) );
      instance.SetNew(&new_MyTau);
      instance.SetNewArray(&newArray_MyTau);
      instance.SetDelete(&delete_MyTau);
      instance.SetDeleteArray(&deleteArray_MyTau);
      instance.SetDestructor(&destruct_MyTau);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyTau*)
   {
      return GenerateInitInstanceLocal((::MyTau*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyTau*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyMCParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyMCParticle(void *p = 0);
   static void *newArray_MyMCParticle(Long_t size, void *p);
   static void delete_MyMCParticle(void *p);
   static void deleteArray_MyMCParticle(void *p);
   static void destruct_MyMCParticle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyMCParticle*)
   {
      ::MyMCParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyMCParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyMCParticle", ::MyMCParticle::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyMCParticle.h", 12,
                  typeid(::MyMCParticle), DefineBehavior(ptr, ptr),
                  &::MyMCParticle::Dictionary, isa_proxy, 4,
                  sizeof(::MyMCParticle) );
      instance.SetNew(&new_MyMCParticle);
      instance.SetNewArray(&newArray_MyMCParticle);
      instance.SetDelete(&delete_MyMCParticle);
      instance.SetDeleteArray(&deleteArray_MyMCParticle);
      instance.SetDestructor(&destruct_MyMCParticle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyMCParticle*)
   {
      return GenerateInitInstanceLocal((::MyMCParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyMCParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SampleInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SampleInfo(void *p = 0);
   static void *newArray_SampleInfo(Long_t size, void *p);
   static void delete_SampleInfo(void *p);
   static void deleteArray_SampleInfo(void *p);
   static void destruct_SampleInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SampleInfo*)
   {
      ::SampleInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SampleInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SampleInfo", ::SampleInfo::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/SampleInfo.h", 9,
                  typeid(::SampleInfo), DefineBehavior(ptr, ptr),
                  &::SampleInfo::Dictionary, isa_proxy, 4,
                  sizeof(::SampleInfo) );
      instance.SetNew(&new_SampleInfo);
      instance.SetNewArray(&newArray_SampleInfo);
      instance.SetDelete(&delete_SampleInfo);
      instance.SetDeleteArray(&deleteArray_SampleInfo);
      instance.SetDestructor(&destruct_SampleInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SampleInfo*)
   {
      return GenerateInitInstanceLocal((::SampleInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SampleInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyKineFitParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyKineFitParticle(void *p = 0);
   static void *newArray_MyKineFitParticle(Long_t size, void *p);
   static void delete_MyKineFitParticle(void *p);
   static void deleteArray_MyKineFitParticle(void *p);
   static void destruct_MyKineFitParticle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyKineFitParticle*)
   {
      ::MyKineFitParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyKineFitParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyKineFitParticle", ::MyKineFitParticle::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyKineFitParticle.h", 12,
                  typeid(::MyKineFitParticle), DefineBehavior(ptr, ptr),
                  &::MyKineFitParticle::Dictionary, isa_proxy, 4,
                  sizeof(::MyKineFitParticle) );
      instance.SetNew(&new_MyKineFitParticle);
      instance.SetNewArray(&newArray_MyKineFitParticle);
      instance.SetDelete(&delete_MyKineFitParticle);
      instance.SetDeleteArray(&deleteArray_MyKineFitParticle);
      instance.SetDestructor(&destruct_MyKineFitParticle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyKineFitParticle*)
   {
      return GenerateInitInstanceLocal((::MyKineFitParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyKineFitParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyEvent(void *p = 0);
   static void *newArray_MyEvent(Long_t size, void *p);
   static void delete_MyEvent(void *p);
   static void deleteArray_MyEvent(void *p);
   static void destruct_MyEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyEvent*)
   {
      ::MyEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyEvent", ::MyEvent::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/MyEvent.h", 41,
                  typeid(::MyEvent), DefineBehavior(ptr, ptr),
                  &::MyEvent::Dictionary, isa_proxy, 4,
                  sizeof(::MyEvent) );
      instance.SetNew(&new_MyEvent);
      instance.SetNewArray(&newArray_MyEvent);
      instance.SetDelete(&delete_MyEvent);
      instance.SetDeleteArray(&deleteArray_MyEvent);
      instance.SetDestructor(&destruct_MyEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyEvent*)
   {
      return GenerateInitInstanceLocal((::MyEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Reader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Reader(void *p = 0);
   static void *newArray_Reader(Long_t size, void *p);
   static void delete_Reader(void *p);
   static void deleteArray_Reader(void *p);
   static void destruct_Reader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Reader*)
   {
      ::Reader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Reader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Reader", ::Reader::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/Reader.h", 44,
                  typeid(::Reader), DefineBehavior(ptr, ptr),
                  &::Reader::Dictionary, isa_proxy, 4,
                  sizeof(::Reader) );
      instance.SetNew(&new_Reader);
      instance.SetNewArray(&newArray_Reader);
      instance.SetDelete(&delete_Reader);
      instance.SetDeleteArray(&deleteArray_Reader);
      instance.SetDestructor(&destruct_Reader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Reader*)
   {
      return GenerateInitInstanceLocal((::Reader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Reader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void BtagSF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BtagSF(void *p = 0);
   static void *newArray_BtagSF(Long_t size, void *p);
   static void delete_BtagSF(void *p);
   static void deleteArray_BtagSF(void *p);
   static void destruct_BtagSF(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::BtagSF*)
   {
      ::BtagSF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BtagSF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BtagSF", ::BtagSF::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/BtagSF.hh", 12,
                  typeid(::BtagSF), DefineBehavior(ptr, ptr),
                  &::BtagSF::Dictionary, isa_proxy, 4,
                  sizeof(::BtagSF) );
      instance.SetNew(&new_BtagSF);
      instance.SetNewArray(&newArray_BtagSF);
      instance.SetDelete(&delete_BtagSF);
      instance.SetDeleteArray(&deleteArray_BtagSF);
      instance.SetDestructor(&destruct_BtagSF);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::BtagSF*)
   {
      return GenerateInitInstanceLocal((::BtagSF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BtagSF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SVEffUnc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SVEffUnc(void *p = 0);
   static void *newArray_SVEffUnc(Long_t size, void *p);
   static void delete_SVEffUnc(void *p);
   static void deleteArray_SVEffUnc(void *p);
   static void destruct_SVEffUnc(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SVEffUnc*)
   {
      ::SVEffUnc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SVEffUnc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SVEffUnc", ::SVEffUnc::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/SVEffUnc.hh", 12,
                  typeid(::SVEffUnc), DefineBehavior(ptr, ptr),
                  &::SVEffUnc::Dictionary, isa_proxy, 4,
                  sizeof(::SVEffUnc) );
      instance.SetNew(&new_SVEffUnc);
      instance.SetNewArray(&newArray_SVEffUnc);
      instance.SetDelete(&delete_SVEffUnc);
      instance.SetDeleteArray(&deleteArray_SVEffUnc);
      instance.SetDestructor(&destruct_SVEffUnc);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SVEffUnc*)
   {
      return GenerateInitInstanceLocal((::SVEffUnc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SVEffUnc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void UncertaintyComputer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_UncertaintyComputer(void *p = 0);
   static void *newArray_UncertaintyComputer(Long_t size, void *p);
   static void delete_UncertaintyComputer(void *p);
   static void deleteArray_UncertaintyComputer(void *p);
   static void destruct_UncertaintyComputer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::UncertaintyComputer*)
   {
      ::UncertaintyComputer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::UncertaintyComputer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("UncertaintyComputer", ::UncertaintyComputer::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/UncertaintyComputer.hh", 36,
                  typeid(::UncertaintyComputer), DefineBehavior(ptr, ptr),
                  &::UncertaintyComputer::Dictionary, isa_proxy, 4,
                  sizeof(::UncertaintyComputer) );
      instance.SetNew(&new_UncertaintyComputer);
      instance.SetNewArray(&newArray_UncertaintyComputer);
      instance.SetDelete(&delete_UncertaintyComputer);
      instance.SetDeleteArray(&deleteArray_UncertaintyComputer);
      instance.SetDestructor(&destruct_UncertaintyComputer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::UncertaintyComputer*)
   {
      return GenerateInitInstanceLocal((::UncertaintyComputer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::UncertaintyComputer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ObjectSelector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ObjectSelector(void *p = 0);
   static void *newArray_ObjectSelector(Long_t size, void *p);
   static void delete_ObjectSelector(void *p);
   static void deleteArray_ObjectSelector(void *p);
   static void destruct_ObjectSelector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ObjectSelector*)
   {
      ::ObjectSelector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ObjectSelector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ObjectSelector", ::ObjectSelector::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/ObjectSelector.hh", 30,
                  typeid(::ObjectSelector), DefineBehavior(ptr, ptr),
                  &::ObjectSelector::Dictionary, isa_proxy, 4,
                  sizeof(::ObjectSelector) );
      instance.SetNew(&new_ObjectSelector);
      instance.SetNewArray(&newArray_ObjectSelector);
      instance.SetDelete(&delete_ObjectSelector);
      instance.SetDeleteArray(&deleteArray_ObjectSelector);
      instance.SetDestructor(&destruct_ObjectSelector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ObjectSelector*)
   {
      return GenerateInitInstanceLocal((::ObjectSelector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ObjectSelector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void HistogramPlotter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HistogramPlotter(void *p = 0);
   static void *newArray_HistogramPlotter(Long_t size, void *p);
   static void delete_HistogramPlotter(void *p);
   static void deleteArray_HistogramPlotter(void *p);
   static void destruct_HistogramPlotter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HistogramPlotter*)
   {
      ::HistogramPlotter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HistogramPlotter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HistogramPlotter", ::HistogramPlotter::Class_Version(), "/afs/cern.ch/user/g/gkole/work/chargedHiggs/examples_template_git/offline_code_Muon_ch/ExampleAnalysis/MiniTree/Selection/src/../../../MiniTree/Selection/interface/HistogramPlotter.hh", 25,
                  typeid(::HistogramPlotter), DefineBehavior(ptr, ptr),
                  &::HistogramPlotter::Dictionary, isa_proxy, 4,
                  sizeof(::HistogramPlotter) );
      instance.SetNew(&new_HistogramPlotter);
      instance.SetNewArray(&newArray_HistogramPlotter);
      instance.SetDelete(&delete_HistogramPlotter);
      instance.SetDeleteArray(&deleteArray_HistogramPlotter);
      instance.SetDestructor(&destruct_HistogramPlotter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HistogramPlotter*)
   {
      return GenerateInitInstanceLocal((::HistogramPlotter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HistogramPlotter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MyJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyJet::Class_Name()
{
   return "MyJet";
}

//______________________________________________________________________________
const char *MyJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyMET::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyMET::Class_Name()
{
   return "MyMET";
}

//______________________________________________________________________________
const char *MyMET::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMET*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyMET::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMET*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyMET::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMET*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyMET::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMET*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyTrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyTrack::Class_Name()
{
   return "MyTrack";
}

//______________________________________________________________________________
const char *MyTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyTrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyVertex::Class_Name()
{
   return "MyVertex";
}

//______________________________________________________________________________
const char *MyVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyElectron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyElectron::Class_Name()
{
   return "MyElectron";
}

//______________________________________________________________________________
const char *MyElectron::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyElectron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyElectron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyElectron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyMuon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyMuon::Class_Name()
{
   return "MyMuon";
}

//______________________________________________________________________________
const char *MyMuon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyMuon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyMuon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyMuon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyTau::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyTau::Class_Name()
{
   return "MyTau";
}

//______________________________________________________________________________
const char *MyTau::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTau*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyTau::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTau*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyTau::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTau*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyTau::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTau*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyMCParticle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyMCParticle::Class_Name()
{
   return "MyMCParticle";
}

//______________________________________________________________________________
const char *MyMCParticle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMCParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyMCParticle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMCParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyMCParticle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMCParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyMCParticle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMCParticle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SampleInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SampleInfo::Class_Name()
{
   return "SampleInfo";
}

//______________________________________________________________________________
const char *SampleInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SampleInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SampleInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SampleInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SampleInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SampleInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SampleInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SampleInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyKineFitParticle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyKineFitParticle::Class_Name()
{
   return "MyKineFitParticle";
}

//______________________________________________________________________________
const char *MyKineFitParticle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyKineFitParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyKineFitParticle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyKineFitParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyKineFitParticle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyKineFitParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyKineFitParticle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyKineFitParticle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyEvent::Class_Name()
{
   return "MyEvent";
}

//______________________________________________________________________________
const char *MyEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Reader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Reader::Class_Name()
{
   return "Reader";
}

//______________________________________________________________________________
const char *Reader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Reader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Reader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Reader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Reader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Reader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Reader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Reader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *BtagSF::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *BtagSF::Class_Name()
{
   return "BtagSF";
}

//______________________________________________________________________________
const char *BtagSF::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::BtagSF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BtagSF::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::BtagSF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BtagSF::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::BtagSF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BtagSF::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::BtagSF*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SVEffUnc::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SVEffUnc::Class_Name()
{
   return "SVEffUnc";
}

//______________________________________________________________________________
const char *SVEffUnc::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SVEffUnc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SVEffUnc::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SVEffUnc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SVEffUnc::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SVEffUnc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SVEffUnc::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SVEffUnc*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *UncertaintyComputer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *UncertaintyComputer::Class_Name()
{
   return "UncertaintyComputer";
}

//______________________________________________________________________________
const char *UncertaintyComputer::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::UncertaintyComputer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int UncertaintyComputer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::UncertaintyComputer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void UncertaintyComputer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::UncertaintyComputer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *UncertaintyComputer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::UncertaintyComputer*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *ObjectSelector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ObjectSelector::Class_Name()
{
   return "ObjectSelector";
}

//______________________________________________________________________________
const char *ObjectSelector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ObjectSelector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ObjectSelector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ObjectSelector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ObjectSelector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ObjectSelector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ObjectSelector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ObjectSelector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *HistogramPlotter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HistogramPlotter::Class_Name()
{
   return "HistogramPlotter";
}

//______________________________________________________________________________
const char *HistogramPlotter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HistogramPlotter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HistogramPlotter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HistogramPlotter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HistogramPlotter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HistogramPlotter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HistogramPlotter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HistogramPlotter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void SampleInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class SampleInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SampleInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(SampleInfo::Class(),this);
   }
}

//______________________________________________________________________________
void SampleInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SampleInfo.
      TClass *R__cl = ::SampleInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sampleName", (void*)&sampleName);
      R__insp.InspectMember("string", (void*)&sampleName, "sampleName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcEvtType", &mcEvtType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "truepileup", (void*)&truepileup);
      R__insp.InspectMember("vector<double>", (void*)&truepileup, "truepileup.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pileup", (void*)&pileup);
      R__insp.InspectMember("vector<double>", (void*)&pileup, "pileup.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puWeights", (void*)&puWeights);
      R__insp.InspectMember("vector<double>", (void*)&puWeights, "puWeights.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "topPtWeights", (void*)&topPtWeights);
      R__insp.InspectMember("vector<double>", (void*)&topPtWeights, "topPtWeights.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hepNUP", &hepNUP);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SampleInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SampleInfo : new ::SampleInfo;
   }
   static void *newArray_SampleInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SampleInfo[nElements] : new ::SampleInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_SampleInfo(void *p) {
      delete ((::SampleInfo*)p);
   }
   static void deleteArray_SampleInfo(void *p) {
      delete [] ((::SampleInfo*)p);
   }
   static void destruct_SampleInfo(void *p) {
      typedef ::SampleInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SampleInfo

//______________________________________________________________________________
void MyMCParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyMCParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyMCParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyMCParticle::Class(),this);
   }
}

//______________________________________________________________________________
void MyMCParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyMCParticle.
      TClass *R__cl = ::MyMCParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4Gen", (void*)&p4Gen);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4Gen, "p4Gen.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pid", &pid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mother", (void*)&mother);
      R__insp.InspectMember("vector<int>", (void*)&mother, "mother.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "motherLine", &motherLine);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyMCParticle(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyMCParticle : new ::MyMCParticle;
   }
   static void *newArray_MyMCParticle(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyMCParticle[nElements] : new ::MyMCParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyMCParticle(void *p) {
      delete ((::MyMCParticle*)p);
   }
   static void deleteArray_MyMCParticle(void *p) {
      delete [] ((::MyMCParticle*)p);
   }
   static void destruct_MyMCParticle(void *p) {
      typedef ::MyMCParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyMCParticle

//______________________________________________________________________________
void MyVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MyVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyVertex.
      TClass *R__cl = ::MyVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XYZ", (void*)&XYZ);
      R__insp.InspectMember("Point3D", (void*)&XYZ, "XYZ.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ErrXYZ", (void*)&ErrXYZ);
      R__insp.InspectMember("Point3D", (void*)&ErrXYZ, "ErrXYZ.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFake", &isFake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isValid", &isValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rho", &rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizedChi2", &normalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NumberOfTracks", &NumberOfTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fracHighPurity", &fracHighPurity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumpt", &sumpt);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyVertex(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyVertex : new ::MyVertex;
   }
   static void *newArray_MyVertex(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyVertex[nElements] : new ::MyVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyVertex(void *p) {
      delete ((::MyVertex*)p);
   }
   static void deleteArray_MyVertex(void *p) {
      delete [] ((::MyVertex*)p);
   }
   static void destruct_MyVertex(void *p) {
      typedef ::MyVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyVertex

//______________________________________________________________________________
void MyTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyTrack::Class(),this);
   }
}

//______________________________________________________________________________
void MyTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyTrack.
      TClass *R__cl = ::MyTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4", (void*)&p4);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4, "p4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackCharge", &trackCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiSquared", &chiSquared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPixHits", &nPixHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "particleType", &particleType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0", &d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0Error", &d0Error);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyTrack(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyTrack : new ::MyTrack;
   }
   static void *newArray_MyTrack(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyTrack[nElements] : new ::MyTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyTrack(void *p) {
      delete ((::MyTrack*)p);
   }
   static void deleteArray_MyTrack(void *p) {
      delete [] ((::MyTrack*)p);
   }
   static void destruct_MyTrack(void *p) {
      typedef ::MyTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyTrack

//______________________________________________________________________________
void MyMET::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyMET.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyMET::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyMET::Class(),this);
   }
}

//______________________________________________________________________________
void MyMET::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyMET.
      TClass *R__cl = ::MyMET::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metName", (void*)&metName);
      R__insp.InspectMember("string", (void*)&metName, "metName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4", (void*)&p4);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4, "p4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEt", &sumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metSignificance", &metSignificance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEtFraction", &emEtFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEtFraction", &hadEtFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonEtFraction", &muonEtFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isPFMET", &isPFMET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCaloMET", &isCaloMET);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyMET(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyMET : new ::MyMET;
   }
   static void *newArray_MyMET(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyMET[nElements] : new ::MyMET[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyMET(void *p) {
      delete ((::MyMET*)p);
   }
   static void deleteArray_MyMET(void *p) {
      delete [] ((::MyMET*)p);
   }
   static void destruct_MyMET(void *p) {
      typedef ::MyMET current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyMET

//______________________________________________________________________________
void MyJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyJet.
      TClass *R__cl = ::MyJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4", (void*)&p4);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4, "p4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SVP4", (void*)&SVP4);
      R__insp.InspectMember("vector<MyLorentzVector>", (void*)&SVP4, "SVP4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SVflightDistance", (void*)&SVflightDistance);
      R__insp.InspectMember("vector<double>", (void*)&SVflightDistance, "SVflightDistance.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SVflightDistanceErr", (void*)&SVflightDistanceErr);
      R__insp.InspectMember("vector<double>", (void*)&SVflightDistanceErr, "SVflightDistanceErr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SVNChi2", (void*)&SVNChi2);
      R__insp.InspectMember("vector<float>", (void*)&SVNChi2, "SVNChi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Genp4", (void*)&Genp4);
      R__insp.InspectMember("MyLorentzVector", (void*)&Genp4, "Genp4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JECs", (void*)&JECs);
      R__insp.InspectMember("map<std::string,double>", (void*)&JECs, "JECs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JECUncertainty", &JECUncertainty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetName", (void*)&jetName);
      R__insp.InspectMember("string", (void*)&jetName, "jetName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parton_id", &parton_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parton_mother_id", &parton_mother_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "partonFlavour", &partonFlavour);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerJet_pt", &triggerJet_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bDiscriminator", (void*)&bDiscriminator);
      R__insp.InspectMember("map<std::string,double>", (void*)&bDiscriminator, "bDiscriminator.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DistanceToClosestLepton", &DistanceToClosestLepton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetCharge", &jetCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEnergyFraction", &emEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEnergyFraction", &hadEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CHEF", &CHEF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CEEF", &CEEF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NHEF", &NHEF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NEEF", &NEEF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeMultiplicity", &chargeMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NumberOfDoughters", &NumberOfDoughters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n90Hits", &n90Hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHPD", &fHPD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRBX", &fRBX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RestrictedEMF", &RestrictedEMF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHCALTowers", &nHCALTowers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nECALTowers", &nECALTowers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetIDLoose", &jetIDLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDMVALoose", &puIDMVALoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDMVAMedium", &puIDMVAMedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDMVATight", &puIDMVATight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDMVADiscr", &puIDMVADiscr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lead_track_pt", &lead_track_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lead_track_charge", &lead_track_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lead_track_d0", &lead_track_d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lead_track_d0_Significance", &lead_track_d0_Significance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaetaMoment", &etaetaMoment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiphiMoment", &phiphiMoment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex", (void*)&vertex);
      R__insp.InspectMember("Point3D", (void*)&vertex, "vertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_vertex", (void*)&tau_vertex);
      R__insp.InspectMember("Point3D", (void*)&tau_vertex, "tau_vertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_againstElectronLoose", &tau_againstElectronLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_againstElectronMedium", &tau_againstElectronMedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_againstElectronTight", &tau_againstElectronTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_againstElectronMVA", &tau_againstElectronMVA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_againstMuonLoose", &tau_againstMuonLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_againstMuonMedium", &tau_againstMuonMedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau_againstMuonTight", &tau_againstMuonTight);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyJet(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyJet : new ::MyJet;
   }
   static void *newArray_MyJet(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyJet[nElements] : new ::MyJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyJet(void *p) {
      delete ((::MyJet*)p);
   }
   static void deleteArray_MyJet(void *p) {
      delete [] ((::MyJet*)p);
   }
   static void destruct_MyJet(void *p) {
      typedef ::MyJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyJet

//______________________________________________________________________________
void MyElectron::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyElectron.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyElectron::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyElectron::Class(),this);
   }
}

//______________________________________________________________________________
void MyElectron::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyElectron.
      TClass *R__cl = ::MyElectron::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", (void*)&name);
      R__insp.InspectMember("string", (void*)&name, "name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_id", &gen_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_mother_id", &gen_mother_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4", (void*)&p4);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4, "p4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex", (void*)&vertex);
      R__insp.InspectMember("Point3D", (void*)&vertex, "vertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEcalDriven", &isEcalDriven);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTrackerDriven", &isTrackerDriven);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isPFlow", &isPFlow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eidWPs", (void*)&eidWPs);
      R__insp.InspectMember("map<std::string,float>", (void*)&eidWPs, "eidWPs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSuperClusterOverP", &eSuperClusterOverP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaEtaSeedClusterTrackAtCalo", &deltaEtaSeedClusterTrackAtCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiSeedClusterTrackAtCalo", &deltaPhiSeedClusterTrackAtCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaEtaSuperClusterTrackAtVtx", &deltaEtaSuperClusterTrackAtVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiSuperClusterTrackAtVtx", &deltaPhiSuperClusterTrackAtVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicOverEm", &hadronicOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaIetaIeta", &sigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbrem", &fbrem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sieta", &sieta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "siphi", &siphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seedEnergy", &seedEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e3x3", &e3x3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e5x5", &e5x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rookbfrac", &rookbfrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s4s1", &s4s1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronSCEt", &electronSCEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronSCEta", &electronSCEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outOfTimeFlag", &outOfTimeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seedTime", &seedTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEE", &isEE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEB", &isEB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLostHits", &nLostHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLostPixelHits", &nLostPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normChi2", &normChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrkIso", &TrkIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ECalIso", &ECalIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HCalIso", &HCalIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RelIso", &RelIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrkIso04", &TrkIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ECalIso04", &ECalIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HCalIso04", &HCalIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RelIso04", &RelIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP3D", &IP3D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP3DError", &IP3DError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D0", &D0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D0Error", &D0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger_ele_pt", &trigger_ele_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyElectron(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyElectron : new ::MyElectron;
   }
   static void *newArray_MyElectron(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyElectron[nElements] : new ::MyElectron[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyElectron(void *p) {
      delete ((::MyElectron*)p);
   }
   static void deleteArray_MyElectron(void *p) {
      delete [] ((::MyElectron*)p);
   }
   static void destruct_MyElectron(void *p) {
      typedef ::MyElectron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyElectron

//______________________________________________________________________________
void MyMuon::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyMuon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyMuon::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyMuon::Class(),this);
   }
}

//______________________________________________________________________________
void MyMuon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyMuon.
      TClass *R__cl = ::MyMuon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", (void*)&name);
      R__insp.InspectMember("string", (void*)&name, "name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4", (void*)&p4);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4, "p4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex", (void*)&vertex);
      R__insp.InspectMember("Point3D", (void*)&vertex, "vertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_id", &gen_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_mother_id", &gen_mother_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "idPattern", &idPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HadEnergy", &HadEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EmEnergy", &EmEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrkIso", &TrkIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ECaloIso", &ECaloIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HCaloIso", &HCaloIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RelIso", &RelIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ChHadIso", &ChHadIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PhotonIso", &PhotonIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NeuHadIso", &NeuHadIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PileupIso", &PileupIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfRelIso", &pfRelIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "UserPFRelIso", &UserPFRelIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GlobalMuonPromptTight", &GlobalMuonPromptTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normChi2", &normChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMuonHits", &nMuonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPixelHits", &nPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMatchedStations", &nMatchedStations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrackerLayers", &nTrackerLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inTrk_normChi2", &inTrk_normChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inTrk_nHits", &inTrk_nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP3D", &IP3D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP3DErr", &IP3DErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D0", &D0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D0Inner", &D0Inner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger_mu_pt", &trigger_mu_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyMuon(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyMuon : new ::MyMuon;
   }
   static void *newArray_MyMuon(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyMuon[nElements] : new ::MyMuon[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyMuon(void *p) {
      delete ((::MyMuon*)p);
   }
   static void deleteArray_MyMuon(void *p) {
      delete [] ((::MyMuon*)p);
   }
   static void destruct_MyMuon(void *p) {
      typedef ::MyMuon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyMuon

//______________________________________________________________________________
void MyTau::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyTau.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyTau::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyTau::Class(),this);
   }
}

//______________________________________________________________________________
void MyTau::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyTau.
      TClass *R__cl = ::MyTau::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tauAlgo", (void*)&tauAlgo);
      R__insp.InspectMember("string", (void*)&tauAlgo, "tauAlgo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_id", &gen_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gen_mother_id", &gen_mother_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4", (void*)&p4);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4, "p4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex", (void*)&vertex);
      R__insp.InspectMember("Point3D", (void*)&vertex, "vertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSignalChargeHadron", &nSignalChargeHadron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leadChargedHadronPt", &leadChargedHadronPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leadChargedHadronP", &leadChargedHadronP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leadingParticlePt", &leadingParticlePt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leadingParticleP", &leadingParticleP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchJetPt", &matchJetPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchJetEta", &matchJetEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchJetPhi", &matchJetPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchJetEMF", &matchJetEMF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tauEMF", &tauEMF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0_max", &d0_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0_max_err", &d0_max_err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayModeFinding", &decayModeFinding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LooseIsolation", &LooseIsolation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LooseIsolationDeltaBetaCorr", &LooseIsolationDeltaBetaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LooseCombinedIsolationDeltaBetaCorr", &LooseCombinedIsolationDeltaBetaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MediumIsolation", &MediumIsolation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MediumIsolationDeltaBetaCorr", &MediumIsolationDeltaBetaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MediumCombinedIsolationDeltaBetaCorr", &MediumCombinedIsolationDeltaBetaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TightIsolation", &TightIsolation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TightIsolationDeltaBetaCorr", &TightIsolationDeltaBetaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TightCombinedIsolationDeltaBetaCorr", &TightCombinedIsolationDeltaBetaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "againstElectronLoose", &againstElectronLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "againstElectronMedium", &againstElectronMedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "againstElectronTight", &againstElectronTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "againstElectronMVA", &againstElectronMVA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "againstMuonLoose", &againstMuonLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "againstMuonMedium", &againstMuonMedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "againstMuonTight", &againstMuonTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayMode", &decayMode);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyTau(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyTau : new ::MyTau;
   }
   static void *newArray_MyTau(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyTau[nElements] : new ::MyTau[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyTau(void *p) {
      delete ((::MyTau*)p);
   }
   static void deleteArray_MyTau(void *p) {
      delete [] ((::MyTau*)p);
   }
   static void destruct_MyTau(void *p) {
      typedef ::MyTau current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyTau

//______________________________________________________________________________
void MyKineFitParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyKineFitParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyKineFitParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyKineFitParticle::Class(),this);
   }
}

//______________________________________________________________________________
void MyKineFitParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyKineFitParticle.
      TClass *R__cl = ::MyKineFitParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4", (void*)&p4);
      R__insp.InspectMember("MyLorentzVector", (void*)&p4, "p4.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex", (void*)&vertex);
      R__insp.InspectMember("Point3D", (void*)&vertex, "vertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "partName", (void*)&partName);
      R__insp.InspectMember("string", (void*)&partName, "partName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "labelName", (void*)&labelName);
      R__insp.InspectMember("string", (void*)&labelName, "labelName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "part_id", &part_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "part_mother_id", &part_mother_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2OfFit", &chi2OfFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusOfFit", &statusOfFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "probOfFit", &probOfFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "njetsOfFit", &njetsOfFit);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyKineFitParticle(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyKineFitParticle : new ::MyKineFitParticle;
   }
   static void *newArray_MyKineFitParticle(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyKineFitParticle[nElements] : new ::MyKineFitParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyKineFitParticle(void *p) {
      delete ((::MyKineFitParticle*)p);
   }
   static void deleteArray_MyKineFitParticle(void *p) {
      delete [] ((::MyKineFitParticle*)p);
   }
   static void destruct_MyKineFitParticle(void *p) {
      typedef ::MyKineFitParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyKineFitParticle

//______________________________________________________________________________
void MyEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyEvent::Class(),this);
   }
}

//______________________________________________________________________________
void MyEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyEvent.
      TClass *R__cl = ::MyEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runNb", &runNb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventNb", &eventNb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumiblock", &lumiblock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Electrons", (void*)&Electrons);
      R__insp.InspectMember("vector<MyElectron>", (void*)&Electrons, "Electrons.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Muons", (void*)&Muons);
      R__insp.InspectMember("vector<MyMuon>", (void*)&Muons, "Muons.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jets", (void*)&Jets);
      R__insp.InspectMember("vector<MyJet>", (void*)&Jets, "Jets.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Taus", (void*)&Taus);
      R__insp.InspectMember("vector<MyTau>", (void*)&Taus, "Taus.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mets", (void*)&mets);
      R__insp.InspectMember("vector<MyMET>", (void*)&mets, "mets.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PrimaryVtxs", (void*)&PrimaryVtxs);
      R__insp.InspectMember("vector<MyVertex>", (void*)&PrimaryVtxs, "PrimaryVtxs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcParticles", (void*)&mcParticles);
      R__insp.InspectMember("vector<MyMCParticle>", (void*)&mcParticles, "mcParticles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "KineFitParticles", (void*)&KineFitParticles);
      R__insp.InspectMember("vector<MyKineFitParticle>", (void*)&KineFitParticles, "KineFitParticles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcMET", &mcMET);
      R__insp.InspectMember(mcMET, "mcMET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sampleInfo", &sampleInfo);
      R__insp.InspectMember(sampleInfo, "sampleInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isData", &isData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hlt", (void*)&hlt);
      R__insp.InspectMember("vector<std::string>", (void*)&hlt, "hlt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventQuality", &eventQuality);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyEvent : new ::MyEvent;
   }
   static void *newArray_MyEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyEvent[nElements] : new ::MyEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyEvent(void *p) {
      delete ((::MyEvent*)p);
   }
   static void deleteArray_MyEvent(void *p) {
      delete [] ((::MyEvent*)p);
   }
   static void destruct_MyEvent(void *p) {
      typedef ::MyEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyEvent

//______________________________________________________________________________
void Reader::Streamer(TBuffer &R__b)
{
   // Stream an object of class Reader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Reader::Class(),this);
   } else {
      R__b.WriteClassBuffer(Reader::Class(),this);
   }
}

//______________________________________________________________________________
void Reader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Reader.
      TClass *R__cl = ::Reader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*myTree", &myTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*myEvent", &myEvent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Reader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Reader : new ::Reader;
   }
   static void *newArray_Reader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Reader[nElements] : new ::Reader[nElements];
   }
   // Wrapper around operator delete
   static void delete_Reader(void *p) {
      delete ((::Reader*)p);
   }
   static void deleteArray_Reader(void *p) {
      delete [] ((::Reader*)p);
   }
   static void destruct_Reader(void *p) {
      typedef ::Reader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Reader

//______________________________________________________________________________
void ObjectSelector::Streamer(TBuffer &R__b)
{
   // Stream an object of class ObjectSelector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ObjectSelector::Class(),this);
   } else {
      R__b.WriteClassBuffer(ObjectSelector::Class(),this);
   }
}

//______________________________________________________________________________
void ObjectSelector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ObjectSelector.
      TClass *R__cl = ::ObjectSelector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZMAX_", &ZMAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZTAUMAX_", &ZTAUMAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JET_PT_MIN_", &JET_PT_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JET_ETA_MAX_", &JET_ETA_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JET_LTK_PT_MIN_", &JET_LTK_PT_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JET_BTAGGING_", &JET_BTAGGING_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JET_EMF_MIN_", &JET_EMF_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JET_LTK_", &JET_LTK_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JET_LEPTON_DRMIN_", &JET_LEPTON_DRMIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E_RELISO_MAX_", &E_RELISO_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E_ETA_MAX_", &E_ETA_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E_D0_MAX_", &E_D0_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E_PT_MIN_", &E_PT_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E_ET_MIN_", &E_ET_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RHO_AEFF_E_", &RHO_AEFF_E_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_E_RELISO_MAX_", &LOOSE_E_RELISO_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_E_ETA_MAX_", &LOOSE_E_ETA_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_E_D0_MAX_", &LOOSE_E_D0_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_E_ET_MIN_", &LOOSE_E_ET_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M_RELISO_MAX_", &M_RELISO_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M_ETA_MAX_", &M_ETA_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M_D0_MAX_", &M_D0_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M_PT_MIN_", &M_PT_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RHO_AEFF_M_", &RHO_AEFF_M_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_M_RELISO_MAX_", &LOOSE_M_RELISO_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_M_ETA_MAX_", &LOOSE_M_ETA_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_M_D0_MAX_", &LOOSE_M_D0_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LOOSE_M_PT_MIN_", &LOOSE_M_PT_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TAU_ETA_MAX_", &TAU_ETA_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TAU_D0_MAX_", &TAU_D0_MAX_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TAU_PT_MIN_", &TAU_PT_MIN_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HPS_ISO_", &HPS_ISO_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "defaultSelection_", &defaultSelection_);
      UncertaintyComputer::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ObjectSelector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ObjectSelector : new ::ObjectSelector;
   }
   static void *newArray_ObjectSelector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ObjectSelector[nElements] : new ::ObjectSelector[nElements];
   }
   // Wrapper around operator delete
   static void delete_ObjectSelector(void *p) {
      delete ((::ObjectSelector*)p);
   }
   static void deleteArray_ObjectSelector(void *p) {
      delete [] ((::ObjectSelector*)p);
   }
   static void destruct_ObjectSelector(void *p) {
      typedef ::ObjectSelector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ObjectSelector

//______________________________________________________________________________
void HistogramPlotter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HistogramPlotter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HistogramPlotter::Class(),this);
   } else {
      R__b.WriteClassBuffer(HistogramPlotter::Class(),this);
   }
}

//______________________________________________________________________________
void HistogramPlotter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HistogramPlotter.
      TClass *R__cl = ::HistogramPlotter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histos1_", (void*)&histos1_);
      R__insp.InspectMember("map<TString,TH1*>", (void*)&histos1_, "histos1_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histos2_", (void*)&histos2_);
      R__insp.InspectMember("map<TString,TH2*>", (void*)&histos2_, "histos2_.", false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HistogramPlotter(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HistogramPlotter : new ::HistogramPlotter;
   }
   static void *newArray_HistogramPlotter(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HistogramPlotter[nElements] : new ::HistogramPlotter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HistogramPlotter(void *p) {
      delete ((::HistogramPlotter*)p);
   }
   static void deleteArray_HistogramPlotter(void *p) {
      delete [] ((::HistogramPlotter*)p);
   }
   static void destruct_HistogramPlotter(void *p) {
      typedef ::HistogramPlotter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HistogramPlotter

//______________________________________________________________________________
void BtagSF::Streamer(TBuffer &R__b)
{
   // Stream an object of class BtagSF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(BtagSF::Class(),this);
   } else {
      R__b.WriteClassBuffer(BtagSF::Class(),this);
   }
}

//______________________________________________________________________________
void BtagSF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BtagSF.
      TClass *R__cl = ::BtagSF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*randm", &randm);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_BtagSF(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::BtagSF : new ::BtagSF;
   }
   static void *newArray_BtagSF(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::BtagSF[nElements] : new ::BtagSF[nElements];
   }
   // Wrapper around operator delete
   static void delete_BtagSF(void *p) {
      delete ((::BtagSF*)p);
   }
   static void deleteArray_BtagSF(void *p) {
      delete [] ((::BtagSF*)p);
   }
   static void destruct_BtagSF(void *p) {
      typedef ::BtagSF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::BtagSF

//______________________________________________________________________________
void SVEffUnc::Streamer(TBuffer &R__b)
{
   // Stream an object of class SVEffUnc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SVEffUnc::Class(),this);
   } else {
      R__b.WriteClassBuffer(SVEffUnc::Class(),this);
   }
}

//______________________________________________________________________________
void SVEffUnc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SVEffUnc.
      TClass *R__cl = ::SVEffUnc::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SVEffUnc(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SVEffUnc : new ::SVEffUnc;
   }
   static void *newArray_SVEffUnc(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SVEffUnc[nElements] : new ::SVEffUnc[nElements];
   }
   // Wrapper around operator delete
   static void delete_SVEffUnc(void *p) {
      delete ((::SVEffUnc*)p);
   }
   static void deleteArray_SVEffUnc(void *p) {
      delete [] ((::SVEffUnc*)p);
   }
   static void destruct_SVEffUnc(void *p) {
      typedef ::SVEffUnc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SVEffUnc

//______________________________________________________________________________
void UncertaintyComputer::Streamer(TBuffer &R__b)
{
   // Stream an object of class UncertaintyComputer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(UncertaintyComputer::Class(),this);
   } else {
      R__b.WriteClassBuffer(UncertaintyComputer::Class(),this);
   }
}

//______________________________________________________________________________
void UncertaintyComputer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class UncertaintyComputer.
      TClass *R__cl = ::UncertaintyComputer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*btsf", &btsf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sveffunc", &sveffunc);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_UncertaintyComputer(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::UncertaintyComputer : new ::UncertaintyComputer;
   }
   static void *newArray_UncertaintyComputer(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::UncertaintyComputer[nElements] : new ::UncertaintyComputer[nElements];
   }
   // Wrapper around operator delete
   static void delete_UncertaintyComputer(void *p) {
      delete ((::UncertaintyComputer*)p);
   }
   static void deleteArray_UncertaintyComputer(void *p) {
      delete [] ((::UncertaintyComputer*)p);
   }
   static void destruct_UncertaintyComputer(void *p) {
      typedef ::UncertaintyComputer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::UncertaintyComputer

namespace ROOT {
   void maplETStringcOTH1mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTH1mUgR_Dictionary();
   static void *new_maplETStringcOTH1mUgR(void *p = 0);
   static void *newArray_maplETStringcOTH1mUgR(Long_t size, void *p);
   static void delete_maplETStringcOTH1mUgR(void *p);
   static void deleteArray_maplETStringcOTH1mUgR(void *p);
   static void destruct_maplETStringcOTH1mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TH1*>*)
   {
      map<TString,TH1*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TH1*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TH1*>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TH1*>), DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTH1mUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TH1*>) );
      instance.SetNew(&new_maplETStringcOTH1mUgR);
      instance.SetNewArray(&newArray_maplETStringcOTH1mUgR);
      instance.SetDelete(&delete_maplETStringcOTH1mUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTH1mUgR);
      instance.SetDestructor(&destruct_maplETStringcOTH1mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<TString,TH1*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TH1*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTH1mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<TString,TH1*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplETStringcOTH1mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH1*> : new map<TString,TH1*>;
   }
   static void *newArray_maplETStringcOTH1mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH1*>[nElements] : new map<TString,TH1*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTH1mUgR(void *p) {
      delete ((map<TString,TH1*>*)p);
   }
   static void deleteArray_maplETStringcOTH1mUgR(void *p) {
      delete [] ((map<TString,TH1*>*)p);
   }
   static void destruct_maplETStringcOTH1mUgR(void *p) {
      typedef map<TString,TH1*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<TString,TH1*>

namespace ROOT {
   void maplETStringcOTH2mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTH2mUgR_Dictionary();
   static void *new_maplETStringcOTH2mUgR(void *p = 0);
   static void *newArray_maplETStringcOTH2mUgR(Long_t size, void *p);
   static void delete_maplETStringcOTH2mUgR(void *p);
   static void deleteArray_maplETStringcOTH2mUgR(void *p);
   static void destruct_maplETStringcOTH2mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TH2*>*)
   {
      map<TString,TH2*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TH2*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TH2*>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TH2*>), DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTH2mUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TH2*>) );
      instance.SetNew(&new_maplETStringcOTH2mUgR);
      instance.SetNewArray(&newArray_maplETStringcOTH2mUgR);
      instance.SetDelete(&delete_maplETStringcOTH2mUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTH2mUgR);
      instance.SetDestructor(&destruct_maplETStringcOTH2mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<TString,TH2*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TH2*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTH2mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<TString,TH2*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplETStringcOTH2mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH2*> : new map<TString,TH2*>;
   }
   static void *newArray_maplETStringcOTH2mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH2*>[nElements] : new map<TString,TH2*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTH2mUgR(void *p) {
      delete ((map<TString,TH2*>*)p);
   }
   static void deleteArray_maplETStringcOTH2mUgR(void *p) {
      delete [] ((map<TString,TH2*>*)p);
   }
   static void destruct_maplETStringcOTH2mUgR(void *p) {
      typedef map<TString,TH2*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<TString,TH2*>

namespace ROOT {
   void maplEstringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOdoublegR_Dictionary();
   static void *new_maplEstringcOdoublegR(void *p = 0);
   static void *newArray_maplEstringcOdoublegR(Long_t size, void *p);
   static void delete_maplEstringcOdoublegR(void *p);
   static void deleteArray_maplEstringcOdoublegR(void *p);
   static void destruct_maplEstringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,double>*)
   {
      map<string,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,double>", -2, "map.dll", 0,
                  typeid(map<string,double>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,double>) );
      instance.SetNew(&new_maplEstringcOdoublegR);
      instance.SetNewArray(&newArray_maplEstringcOdoublegR);
      instance.SetDelete(&delete_maplEstringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOdoublegR);
      instance.SetDestructor(&destruct_maplEstringcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double> : new map<string,double>;
   }
   static void *newArray_maplEstringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double>[nElements] : new map<string,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOdoublegR(void *p) {
      delete ((map<string,double>*)p);
   }
   static void deleteArray_maplEstringcOdoublegR(void *p) {
      delete [] ((map<string,double>*)p);
   }
   static void destruct_maplEstringcOdoublegR(void *p) {
      typedef map<string,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,double>

namespace ROOT {
   void maplEstringcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOfloatgR_Dictionary();
   static void *new_maplEstringcOfloatgR(void *p = 0);
   static void *newArray_maplEstringcOfloatgR(Long_t size, void *p);
   static void delete_maplEstringcOfloatgR(void *p);
   static void deleteArray_maplEstringcOfloatgR(void *p);
   static void destruct_maplEstringcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,float>*)
   {
      map<string,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,float>", -2, "map.dll", 0,
                  typeid(map<string,float>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,float>) );
      instance.SetNew(&new_maplEstringcOfloatgR);
      instance.SetNewArray(&newArray_maplEstringcOfloatgR);
      instance.SetDelete(&delete_maplEstringcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOfloatgR);
      instance.SetDestructor(&destruct_maplEstringcOfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float> : new map<string,float>;
   }
   static void *newArray_maplEstringcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float>[nElements] : new map<string,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOfloatgR(void *p) {
      delete ((map<string,float>*)p);
   }
   static void deleteArray_maplEstringcOfloatgR(void *p) {
      delete [] ((map<string,float>*)p);
   }
   static void destruct_maplEstringcOfloatgR(void *p) {
      typedef map<string,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,float>

namespace ROOT {
   void vectorlEMyElectrongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyElectrongR_Dictionary();
   static void *new_vectorlEMyElectrongR(void *p = 0);
   static void *newArray_vectorlEMyElectrongR(Long_t size, void *p);
   static void delete_vectorlEMyElectrongR(void *p);
   static void deleteArray_vectorlEMyElectrongR(void *p);
   static void destruct_vectorlEMyElectrongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyElectron>*)
   {
      vector<MyElectron> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyElectron>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyElectron>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyElectron>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyElectrongR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyElectron>) );
      instance.SetNew(&new_vectorlEMyElectrongR);
      instance.SetNewArray(&newArray_vectorlEMyElectrongR);
      instance.SetDelete(&delete_vectorlEMyElectrongR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyElectrongR);
      instance.SetDestructor(&destruct_vectorlEMyElectrongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyElectron> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyElectron>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyElectrongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyElectron>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyElectrongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyElectron> : new vector<MyElectron>;
   }
   static void *newArray_vectorlEMyElectrongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyElectron>[nElements] : new vector<MyElectron>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyElectrongR(void *p) {
      delete ((vector<MyElectron>*)p);
   }
   static void deleteArray_vectorlEMyElectrongR(void *p) {
      delete [] ((vector<MyElectron>*)p);
   }
   static void destruct_vectorlEMyElectrongR(void *p) {
      typedef vector<MyElectron> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyElectron>

namespace ROOT {
   void vectorlEMyJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyJetgR_Dictionary();
   static void *new_vectorlEMyJetgR(void *p = 0);
   static void *newArray_vectorlEMyJetgR(Long_t size, void *p);
   static void delete_vectorlEMyJetgR(void *p);
   static void deleteArray_vectorlEMyJetgR(void *p);
   static void destruct_vectorlEMyJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyJet>*)
   {
      vector<MyJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyJetgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyJet>) );
      instance.SetNew(&new_vectorlEMyJetgR);
      instance.SetNewArray(&newArray_vectorlEMyJetgR);
      instance.SetDelete(&delete_vectorlEMyJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyJetgR);
      instance.SetDestructor(&destruct_vectorlEMyJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyJet> : new vector<MyJet>;
   }
   static void *newArray_vectorlEMyJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyJet>[nElements] : new vector<MyJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyJetgR(void *p) {
      delete ((vector<MyJet>*)p);
   }
   static void deleteArray_vectorlEMyJetgR(void *p) {
      delete [] ((vector<MyJet>*)p);
   }
   static void destruct_vectorlEMyJetgR(void *p) {
      typedef vector<MyJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyJet>

namespace ROOT {
   void vectorlEMyKineFitParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyKineFitParticlegR_Dictionary();
   static void *new_vectorlEMyKineFitParticlegR(void *p = 0);
   static void *newArray_vectorlEMyKineFitParticlegR(Long_t size, void *p);
   static void delete_vectorlEMyKineFitParticlegR(void *p);
   static void deleteArray_vectorlEMyKineFitParticlegR(void *p);
   static void destruct_vectorlEMyKineFitParticlegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyKineFitParticle>*)
   {
      vector<MyKineFitParticle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyKineFitParticle>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyKineFitParticle>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyKineFitParticle>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyKineFitParticlegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyKineFitParticle>) );
      instance.SetNew(&new_vectorlEMyKineFitParticlegR);
      instance.SetNewArray(&newArray_vectorlEMyKineFitParticlegR);
      instance.SetDelete(&delete_vectorlEMyKineFitParticlegR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyKineFitParticlegR);
      instance.SetDestructor(&destruct_vectorlEMyKineFitParticlegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyKineFitParticle> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyKineFitParticle>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyKineFitParticlegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyKineFitParticle>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyKineFitParticlegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyKineFitParticle> : new vector<MyKineFitParticle>;
   }
   static void *newArray_vectorlEMyKineFitParticlegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyKineFitParticle>[nElements] : new vector<MyKineFitParticle>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyKineFitParticlegR(void *p) {
      delete ((vector<MyKineFitParticle>*)p);
   }
   static void deleteArray_vectorlEMyKineFitParticlegR(void *p) {
      delete [] ((vector<MyKineFitParticle>*)p);
   }
   static void destruct_vectorlEMyKineFitParticlegR(void *p) {
      typedef vector<MyKineFitParticle> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyKineFitParticle>

namespace ROOT {
   void vectorlEMyMCParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyMCParticlegR_Dictionary();
   static void *new_vectorlEMyMCParticlegR(void *p = 0);
   static void *newArray_vectorlEMyMCParticlegR(Long_t size, void *p);
   static void delete_vectorlEMyMCParticlegR(void *p);
   static void deleteArray_vectorlEMyMCParticlegR(void *p);
   static void destruct_vectorlEMyMCParticlegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyMCParticle>*)
   {
      vector<MyMCParticle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyMCParticle>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyMCParticle>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyMCParticle>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyMCParticlegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyMCParticle>) );
      instance.SetNew(&new_vectorlEMyMCParticlegR);
      instance.SetNewArray(&newArray_vectorlEMyMCParticlegR);
      instance.SetDelete(&delete_vectorlEMyMCParticlegR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyMCParticlegR);
      instance.SetDestructor(&destruct_vectorlEMyMCParticlegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyMCParticle> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyMCParticle>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyMCParticlegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyMCParticle>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyMCParticlegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMCParticle> : new vector<MyMCParticle>;
   }
   static void *newArray_vectorlEMyMCParticlegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMCParticle>[nElements] : new vector<MyMCParticle>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyMCParticlegR(void *p) {
      delete ((vector<MyMCParticle>*)p);
   }
   static void deleteArray_vectorlEMyMCParticlegR(void *p) {
      delete [] ((vector<MyMCParticle>*)p);
   }
   static void destruct_vectorlEMyMCParticlegR(void *p) {
      typedef vector<MyMCParticle> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyMCParticle>

namespace ROOT {
   void vectorlEMyMETgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyMETgR_Dictionary();
   static void *new_vectorlEMyMETgR(void *p = 0);
   static void *newArray_vectorlEMyMETgR(Long_t size, void *p);
   static void delete_vectorlEMyMETgR(void *p);
   static void deleteArray_vectorlEMyMETgR(void *p);
   static void destruct_vectorlEMyMETgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyMET>*)
   {
      vector<MyMET> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyMET>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyMET>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyMET>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyMETgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyMET>) );
      instance.SetNew(&new_vectorlEMyMETgR);
      instance.SetNewArray(&newArray_vectorlEMyMETgR);
      instance.SetDelete(&delete_vectorlEMyMETgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyMETgR);
      instance.SetDestructor(&destruct_vectorlEMyMETgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyMET> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyMET>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyMETgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyMET>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyMETgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMET> : new vector<MyMET>;
   }
   static void *newArray_vectorlEMyMETgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMET>[nElements] : new vector<MyMET>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyMETgR(void *p) {
      delete ((vector<MyMET>*)p);
   }
   static void deleteArray_vectorlEMyMETgR(void *p) {
      delete [] ((vector<MyMET>*)p);
   }
   static void destruct_vectorlEMyMETgR(void *p) {
      typedef vector<MyMET> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyMET>

namespace ROOT {
   void vectorlEMyMuongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyMuongR_Dictionary();
   static void *new_vectorlEMyMuongR(void *p = 0);
   static void *newArray_vectorlEMyMuongR(Long_t size, void *p);
   static void delete_vectorlEMyMuongR(void *p);
   static void deleteArray_vectorlEMyMuongR(void *p);
   static void destruct_vectorlEMyMuongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyMuon>*)
   {
      vector<MyMuon> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyMuon>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyMuon>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyMuon>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyMuongR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyMuon>) );
      instance.SetNew(&new_vectorlEMyMuongR);
      instance.SetNewArray(&newArray_vectorlEMyMuongR);
      instance.SetDelete(&delete_vectorlEMyMuongR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyMuongR);
      instance.SetDestructor(&destruct_vectorlEMyMuongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyMuon> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyMuon>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyMuongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyMuon>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyMuongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMuon> : new vector<MyMuon>;
   }
   static void *newArray_vectorlEMyMuongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMuon>[nElements] : new vector<MyMuon>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyMuongR(void *p) {
      delete ((vector<MyMuon>*)p);
   }
   static void deleteArray_vectorlEMyMuongR(void *p) {
      delete [] ((vector<MyMuon>*)p);
   }
   static void destruct_vectorlEMyMuongR(void *p) {
      typedef vector<MyMuon> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyMuon>

namespace ROOT {
   void vectorlEMyTaugR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyTaugR_Dictionary();
   static void *new_vectorlEMyTaugR(void *p = 0);
   static void *newArray_vectorlEMyTaugR(Long_t size, void *p);
   static void delete_vectorlEMyTaugR(void *p);
   static void deleteArray_vectorlEMyTaugR(void *p);
   static void destruct_vectorlEMyTaugR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyTau>*)
   {
      vector<MyTau> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyTau>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyTau>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyTau>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyTaugR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyTau>) );
      instance.SetNew(&new_vectorlEMyTaugR);
      instance.SetNewArray(&newArray_vectorlEMyTaugR);
      instance.SetDelete(&delete_vectorlEMyTaugR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyTaugR);
      instance.SetDestructor(&destruct_vectorlEMyTaugR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyTau> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyTau>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyTaugR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyTau>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyTaugR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTau> : new vector<MyTau>;
   }
   static void *newArray_vectorlEMyTaugR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTau>[nElements] : new vector<MyTau>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyTaugR(void *p) {
      delete ((vector<MyTau>*)p);
   }
   static void deleteArray_vectorlEMyTaugR(void *p) {
      delete [] ((vector<MyTau>*)p);
   }
   static void destruct_vectorlEMyTaugR(void *p) {
      typedef vector<MyTau> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyTau>

namespace ROOT {
   void vectorlEMyTrackgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyTrackgR_Dictionary();
   static void *new_vectorlEMyTrackgR(void *p = 0);
   static void *newArray_vectorlEMyTrackgR(Long_t size, void *p);
   static void delete_vectorlEMyTrackgR(void *p);
   static void deleteArray_vectorlEMyTrackgR(void *p);
   static void destruct_vectorlEMyTrackgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyTrack>*)
   {
      vector<MyTrack> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyTrack>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyTrack>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyTrack>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyTrackgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyTrack>) );
      instance.SetNew(&new_vectorlEMyTrackgR);
      instance.SetNewArray(&newArray_vectorlEMyTrackgR);
      instance.SetDelete(&delete_vectorlEMyTrackgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyTrackgR);
      instance.SetDestructor(&destruct_vectorlEMyTrackgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyTrack> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyTrack>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyTrackgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyTrack>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyTrackgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTrack> : new vector<MyTrack>;
   }
   static void *newArray_vectorlEMyTrackgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTrack>[nElements] : new vector<MyTrack>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyTrackgR(void *p) {
      delete ((vector<MyTrack>*)p);
   }
   static void deleteArray_vectorlEMyTrackgR(void *p) {
      delete [] ((vector<MyTrack>*)p);
   }
   static void destruct_vectorlEMyTrackgR(void *p) {
      typedef vector<MyTrack> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyTrack>

namespace ROOT {
   void vectorlEMyVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyVertexgR_Dictionary();
   static void *new_vectorlEMyVertexgR(void *p = 0);
   static void *newArray_vectorlEMyVertexgR(Long_t size, void *p);
   static void delete_vectorlEMyVertexgR(void *p);
   static void deleteArray_vectorlEMyVertexgR(void *p);
   static void destruct_vectorlEMyVertexgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyVertex>*)
   {
      vector<MyVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyVertex>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyVertex>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyVertexgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MyVertex>) );
      instance.SetNew(&new_vectorlEMyVertexgR);
      instance.SetNewArray(&newArray_vectorlEMyVertexgR);
      instance.SetDelete(&delete_vectorlEMyVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyVertexgR);
      instance.SetDestructor(&destruct_vectorlEMyVertexgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyVertexgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex> : new vector<MyVertex>;
   }
   static void *newArray_vectorlEMyVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex>[nElements] : new vector<MyVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyVertexgR(void *p) {
      delete ((vector<MyVertex>*)p);
   }
   static void deleteArray_vectorlEMyVertexgR(void *p) {
      delete [] ((vector<MyVertex>*)p);
   }
   static void destruct_vectorlEMyVertexgR(void *p) {
      typedef vector<MyVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyVertex>

namespace ROOT {
   void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_Dictionary();
   static void *new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p);
   static void destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)
   {
      vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >) );
      instance.SetNew(&new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > : new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >;
   }
   static void *newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >[nElements] : new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      delete ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)p);
   }
   static void deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      delete [] ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)p);
   }
   static void destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      typedef vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc472/lcg/root/5.32.00-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* eventdict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableeventdict();

extern "C" void G__set_cpp_environmenteventdict() {
  G__cpp_reset_tagtableeventdict();
}
#include <new>
extern "C" int G__cpp_dllreveventdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MyJet */
static int G__eventdict_495_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyJet[n];
     } else {
       p = new((void*) gvp) MyJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyJet;
     } else {
       p = new((void*) gvp) MyJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyJet*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_495_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_495_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyJet(*(MyJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyJet G__TMyJet;
static int G__eventdict_495_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyJet*) (soff+(sizeof(MyJet)*i)))->~G__TMyJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyJet*) (soff))->~G__TMyJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_495_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyJet* dest = (MyJet*) G__getstructoffset();
   *dest = *(MyJet*) libp->para[0].ref;
   const MyJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyMET */
static int G__eventdict_500_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMET* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMET[n];
     } else {
       p = new((void*) gvp) MyMET[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMET;
     } else {
       p = new((void*) gvp) MyMET;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMET));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMET*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyMET::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMET::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyMET::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyMET::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyMET*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMET*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMET*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMET*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMET::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMET::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMET::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMET::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyMET* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyMET(*(MyMET*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMET));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyMET G__TMyMET;
static int G__eventdict_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyMET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyMET*) (soff+(sizeof(MyMET)*i)))->~G__TMyMET();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyMET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyMET*) (soff))->~G__TMyMET();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMET* dest = (MyMET*) G__getstructoffset();
   *dest = *(MyMET*) libp->para[0].ref;
   const MyMET& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyTrack */
static int G__eventdict_501_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTrack[n];
     } else {
       p = new((void*) gvp) MyTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTrack;
     } else {
       p = new((void*) gvp) MyTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrack*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyTrack*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrack*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrack*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_501_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyTrack(*(MyTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyTrack G__TMyTrack;
static int G__eventdict_501_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyTrack*) (soff+(sizeof(MyTrack)*i)))->~G__TMyTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyTrack*) (soff))->~G__TMyTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_501_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTrack* dest = (MyTrack*) G__getstructoffset();
   *dest = *(MyTrack*) libp->para[0].ref;
   const MyTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyVertex */
static int G__eventdict_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex[n];
     } else {
       p = new((void*) gvp) MyVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex;
     } else {
       p = new((void*) gvp) MyVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyVertex*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_502_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyVertex(*(MyVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyVertex G__TMyVertex;
static int G__eventdict_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyVertex*) (soff+(sizeof(MyVertex)*i)))->~G__TMyVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyVertex*) (soff))->~G__TMyVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* dest = (MyVertex*) G__getstructoffset();
   *dest = *(MyVertex*) libp->para[0].ref;
   const MyVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyElectron */
static int G__eventdict_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyElectron* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyElectron[n];
     } else {
       p = new((void*) gvp) MyElectron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyElectron;
     } else {
       p = new((void*) gvp) MyElectron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyElectron*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyElectron*) G__getstructoffset())->GetName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyElectron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyElectron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyElectron::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyElectron*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyElectron*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyElectron*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyElectron*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyElectron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyElectron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyElectron* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyElectron(*(MyElectron*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyElectron G__TMyElectron;
static int G__eventdict_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyElectron*) (soff+(sizeof(MyElectron)*i)))->~G__TMyElectron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyElectron*) (soff))->~G__TMyElectron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_503_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyElectron* dest = (MyElectron*) G__getstructoffset();
   *dest = *(MyElectron*) libp->para[0].ref;
   const MyElectron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyMuon */
static int G__eventdict_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMuon[n];
     } else {
       p = new((void*) gvp) MyMuon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMuon;
     } else {
       p = new((void*) gvp) MyMuon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMuon*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyMuon*) G__getstructoffset())->GetName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyMuon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyMuon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyMuon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyMuon*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMuon*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMuon*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMuon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMuon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMuon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyMuon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyMuon(*(MyMuon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyMuon G__TMyMuon;
static int G__eventdict_504_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyMuon*) (soff+(sizeof(MyMuon)*i)))->~G__TMyMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyMuon*) (soff))->~G__TMyMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_504_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMuon* dest = (MyMuon*) G__getstructoffset();
   *dest = *(MyMuon*) libp->para[0].ref;
   const MyMuon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyTau */
static int G__eventdict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTau* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTau[n];
     } else {
       p = new((void*) gvp) MyTau[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTau;
     } else {
       p = new((void*) gvp) MyTau;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTau));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTau*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyTau*) G__getstructoffset())->GetAlgoName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTau::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTau::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyTau::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyTau::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyTau*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTau*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTau*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTau*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTau::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTau::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTau::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTau::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyTau* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyTau(*(MyTau*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTau));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyTau G__TMyTau;
static int G__eventdict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyTau*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyTau*) (soff+(sizeof(MyTau)*i)))->~G__TMyTau();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyTau*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyTau*) (soff))->~G__TMyTau();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTau* dest = (MyTau*) G__getstructoffset();
   *dest = *(MyTau*) libp->para[0].ref;
   const MyTau& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyMCParticle */
static int G__eventdict_506_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMCParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMCParticle[n];
     } else {
       p = new((void*) gvp) MyMCParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMCParticle;
     } else {
       p = new((void*) gvp) MyMCParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMCParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMCParticle*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyMCParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMCParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyMCParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyMCParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyMCParticle*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMCParticle*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMCParticle*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMCParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMCParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMCParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMCParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMCParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_506_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyMCParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyMCParticle(*(MyMCParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMCParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyMCParticle G__TMyMCParticle;
static int G__eventdict_506_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyMCParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyMCParticle*) (soff+(sizeof(MyMCParticle)*i)))->~G__TMyMCParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyMCParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyMCParticle*) (soff))->~G__TMyMCParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_506_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMCParticle* dest = (MyMCParticle*) G__getstructoffset();
   *dest = *(MyMCParticle*) libp->para[0].ref;
   const MyMCParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SampleInfo */
static int G__eventdict_511_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleInfo[n];
     } else {
       p = new((void*) gvp) SampleInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleInfo;
     } else {
       p = new((void*) gvp) SampleInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_SampleInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SampleInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SampleInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SampleInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SampleInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SampleInfo*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleInfo*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleInfo*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SampleInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SampleInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SampleInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_511_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SampleInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_511_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SampleInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SampleInfo(*(SampleInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_SampleInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SampleInfo G__TSampleInfo;
static int G__eventdict_511_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SampleInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SampleInfo*) (soff+(sizeof(SampleInfo)*i)))->~G__TSampleInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SampleInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SampleInfo*) (soff))->~G__TSampleInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_511_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleInfo* dest = (SampleInfo*) G__getstructoffset();
   *dest = *(SampleInfo*) libp->para[0].ref;
   const SampleInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyKineFitParticle */
static int G__eventdict_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyKineFitParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyKineFitParticle[n];
     } else {
       p = new((void*) gvp) MyKineFitParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyKineFitParticle;
     } else {
       p = new((void*) gvp) MyKineFitParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyKineFitParticle*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyKineFitParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyKineFitParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyKineFitParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyKineFitParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyKineFitParticle*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyKineFitParticle*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyKineFitParticle*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyKineFitParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyKineFitParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyKineFitParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyKineFitParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_512_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyKineFitParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_512_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyKineFitParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyKineFitParticle(*(MyKineFitParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyKineFitParticle G__TMyKineFitParticle;
static int G__eventdict_512_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyKineFitParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyKineFitParticle*) (soff+(sizeof(MyKineFitParticle)*i)))->~G__TMyKineFitParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyKineFitParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyKineFitParticle*) (soff))->~G__TMyKineFitParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_512_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyKineFitParticle* dest = (MyKineFitParticle*) G__getstructoffset();
   *dest = *(MyKineFitParticle*) libp->para[0].ref;
   const MyKineFitParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyEvent */
static int G__eventdict_513_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvent[n];
     } else {
       p = new((void*) gvp) MyEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvent;
     } else {
       p = new((void*) gvp) MyEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvent*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyEvent*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvent*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvent*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_513_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyEvent(*(MyEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyEvent G__TMyEvent;
static int G__eventdict_513_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyEvent*) (soff+(sizeof(MyEvent)*i)))->~G__TMyEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyEvent*) (soff))->~G__TMyEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_513_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvent* dest = (MyEvent*) G__getstructoffset();
   *dest = *(MyEvent*) libp->para[0].ref;
   const MyEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyElectron,allocator<MyElectron> > */
static int G__eventdict_519_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyElectron,allocator<MyElectron> >::reference obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->at((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::const_reference obj = ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->at((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->begin();
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->end();
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyElectron,allocator<MyElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->rend();
         pobj = new vector<MyElectron,allocator<MyElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->resize((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->resize((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *((MyElectron*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyElectron,allocator<MyElectron> >::reference obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator[]((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::const_reference obj = ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator[]((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >[n];
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >;
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *(MyElectron*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *(MyElectron*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyElectron,allocator<MyElectron> >(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyElectron,allocator<MyElectron> >(*((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >(*((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyElectron,allocator<MyElectron> >& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator=(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->reserve((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->push_back(*(MyElectron*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->swap(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *(MyElectron*) libp->para[1].ref);
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), (vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[1])
, *(MyElectron*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->erase(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->erase(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_519_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyElectron,allocator<MyElectron> > G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR;
static int G__eventdict_519_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyElectron,allocator<MyElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyElectron,allocator<MyElectron> >*) (soff+(sizeof(vector<MyElectron,allocator<MyElectron> >)*i)))->~G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyElectron,allocator<MyElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyElectron,allocator<MyElectron> >*) (soff))->~G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyMuon,allocator<MyMuon> > */
static int G__eventdict_523_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMuon,allocator<MyMuon> >::reference obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->at((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::const_reference obj = ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->at((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->begin();
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->end();
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyMuon,allocator<MyMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->rend();
         pobj = new vector<MyMuon,allocator<MyMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->resize((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->resize((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *((MyMuon*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMuon,allocator<MyMuon> >::reference obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator[]((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::const_reference obj = ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator[]((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >[n];
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >;
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *(MyMuon*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *(MyMuon*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMuon,allocator<MyMuon> >(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMuon,allocator<MyMuon> >(*((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >(*((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMuon,allocator<MyMuon> >& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator=(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->reserve((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->push_back(*(MyMuon*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->swap(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *(MyMuon*) libp->para[1].ref);
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), (vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[1])
, *(MyMuon*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->erase(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->erase(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyMuon,allocator<MyMuon> > G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR;
static int G__eventdict_523_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyMuon,allocator<MyMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyMuon,allocator<MyMuon> >*) (soff+(sizeof(vector<MyMuon,allocator<MyMuon> >)*i)))->~G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyMuon,allocator<MyMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyMuon,allocator<MyMuon> >*) (soff))->~G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyJet,allocator<MyJet> > */
static int G__eventdict_527_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyJet,allocator<MyJet> >::reference obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->at((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::const_reference obj = ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->at((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::reverse_iterator* pobj;
         vector<MyJet,allocator<MyJet> >::reverse_iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyJet,allocator<MyJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::reverse_iterator* pobj;
         vector<MyJet,allocator<MyJet> >::reverse_iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyJet,allocator<MyJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->resize((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->resize((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *((MyJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyJet,allocator<MyJet> >::reference obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator[]((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::const_reference obj = ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator[]((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >;
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *(MyJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *(MyJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyJet,allocator<MyJet> >(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyJet,allocator<MyJet> >(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyJet,allocator<MyJet> >(*((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyJet,allocator<MyJet> >(*((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyJet,allocator<MyJet> >& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator=(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->reserve((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->push_back(*(MyJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->swap(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *(MyJet*) libp->para[1].ref);
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), (vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[1])
, *(MyJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->erase(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->erase(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_527_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyJet,allocator<MyJet> > G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR;
static int G__eventdict_527_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyJet,allocator<MyJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyJet,allocator<MyJet> >*) (soff+(sizeof(vector<MyJet,allocator<MyJet> >)*i)))->~G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyJet,allocator<MyJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyJet,allocator<MyJet> >*) (soff))->~G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyTau,allocator<MyTau> > */
static int G__eventdict_531_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTau,allocator<MyTau> >::reference obj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->at((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau,allocator<MyTau> >::const_reference obj = ((const vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->at((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau,allocator<MyTau> >::iterator* pobj;
         vector<MyTau,allocator<MyTau> >::iterator xobj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->begin();
         pobj = new vector<MyTau,allocator<MyTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau,allocator<MyTau> >::iterator* pobj;
         vector<MyTau,allocator<MyTau> >::iterator xobj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->end();
         pobj = new vector<MyTau,allocator<MyTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau,allocator<MyTau> >::reverse_iterator* pobj;
         vector<MyTau,allocator<MyTau> >::reverse_iterator xobj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyTau,allocator<MyTau> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau,allocator<MyTau> >::reverse_iterator* pobj;
         vector<MyTau,allocator<MyTau> >::reverse_iterator xobj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->rend();
         pobj = new vector<MyTau,allocator<MyTau> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->resize((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->resize((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]), *((MyTau*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTau,allocator<MyTau> >::reference obj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->operator[]((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau,allocator<MyTau> >::const_reference obj = ((const vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->operator[]((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTau,allocator<MyTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTau,allocator<MyTau> >[n];
     } else {
       p = new((void*) gvp) vector<MyTau,allocator<MyTau> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTau,allocator<MyTau> >;
     } else {
       p = new((void*) gvp) vector<MyTau,allocator<MyTau> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTau,allocator<MyTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTau,allocator<MyTau> >((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]), *(MyTau*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyTau,allocator<MyTau> >((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]), *(MyTau*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTau,allocator<MyTau> >((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyTau,allocator<MyTau> >((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTau,allocator<MyTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTau,allocator<MyTau> >(*(vector<MyTau,allocator<MyTau> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyTau,allocator<MyTau> >(*(vector<MyTau,allocator<MyTau> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTau,allocator<MyTau> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTau,allocator<MyTau> >(*((vector<MyTau,allocator<MyTau> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTau,allocator<MyTau> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyTau,allocator<MyTau> >(*((vector<MyTau,allocator<MyTau> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTau,allocator<MyTau> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTau,allocator<MyTau> >& obj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->operator=(*(vector<MyTau,allocator<MyTau> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->reserve((vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTau& obj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTau& obj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->push_back(*(MyTau*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->swap(*(vector<MyTau,allocator<MyTau> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau,allocator<MyTau> >::iterator* pobj;
         vector<MyTau,allocator<MyTau> >::iterator xobj = ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->insert(*((vector<MyTau,allocator<MyTau> >::iterator*) G__int(libp->para[0])), *(MyTau*) libp->para[1].ref);
         pobj = new vector<MyTau,allocator<MyTau> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->insert(*((vector<MyTau,allocator<MyTau> >::iterator*) G__int(libp->para[0])), *((vector<MyTau,allocator<MyTau> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyTau,allocator<MyTau> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->insert(*((vector<MyTau,allocator<MyTau> >::iterator*) G__int(libp->para[0])), (vector<MyTau,allocator<MyTau> >::size_type) G__int(libp->para[1])
, *(MyTau*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->erase(*((vector<MyTau,allocator<MyTau> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->erase(*((vector<MyTau,allocator<MyTau> >::iterator*) G__int(libp->para[0])), *((vector<MyTau,allocator<MyTau> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_531_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTau,allocator<MyTau> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyTau,allocator<MyTau> > G__TvectorlEMyTaucOallocatorlEMyTaugRsPgR;
static int G__eventdict_531_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyTau,allocator<MyTau> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyTau,allocator<MyTau> >*) (soff+(sizeof(vector<MyTau,allocator<MyTau> >)*i)))->~G__TvectorlEMyTaucOallocatorlEMyTaugRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyTau,allocator<MyTau> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyTau,allocator<MyTau> >*) (soff))->~G__TvectorlEMyTaucOallocatorlEMyTaugRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyMET,allocator<MyMET> > */
static int G__eventdict_535_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMET,allocator<MyMET> >::reference obj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->at((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMET,allocator<MyMET> >::const_reference obj = ((const vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->at((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMET,allocator<MyMET> >::iterator* pobj;
         vector<MyMET,allocator<MyMET> >::iterator xobj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->begin();
         pobj = new vector<MyMET,allocator<MyMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMET,allocator<MyMET> >::iterator* pobj;
         vector<MyMET,allocator<MyMET> >::iterator xobj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->end();
         pobj = new vector<MyMET,allocator<MyMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMET,allocator<MyMET> >::reverse_iterator* pobj;
         vector<MyMET,allocator<MyMET> >::reverse_iterator xobj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyMET,allocator<MyMET> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMET,allocator<MyMET> >::reverse_iterator* pobj;
         vector<MyMET,allocator<MyMET> >::reverse_iterator xobj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->rend();
         pobj = new vector<MyMET,allocator<MyMET> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->resize((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->resize((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]), *((MyMET*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMET,allocator<MyMET> >::reference obj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->operator[]((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMET,allocator<MyMET> >::const_reference obj = ((const vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->operator[]((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMET,allocator<MyMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMET,allocator<MyMET> >[n];
     } else {
       p = new((void*) gvp) vector<MyMET,allocator<MyMET> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMET,allocator<MyMET> >;
     } else {
       p = new((void*) gvp) vector<MyMET,allocator<MyMET> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMET,allocator<MyMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMET,allocator<MyMET> >((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]), *(MyMET*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyMET,allocator<MyMET> >((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]), *(MyMET*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMET,allocator<MyMET> >((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyMET,allocator<MyMET> >((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMET,allocator<MyMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMET,allocator<MyMET> >(*(vector<MyMET,allocator<MyMET> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyMET,allocator<MyMET> >(*(vector<MyMET,allocator<MyMET> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMET,allocator<MyMET> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMET,allocator<MyMET> >(*((vector<MyMET,allocator<MyMET> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMET,allocator<MyMET> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyMET,allocator<MyMET> >(*((vector<MyMET,allocator<MyMET> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMET,allocator<MyMET> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMET,allocator<MyMET> >& obj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->operator=(*(vector<MyMET,allocator<MyMET> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->reserve((vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMET& obj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMET& obj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->push_back(*(MyMET*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->swap(*(vector<MyMET,allocator<MyMET> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMET,allocator<MyMET> >::iterator* pobj;
         vector<MyMET,allocator<MyMET> >::iterator xobj = ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->insert(*((vector<MyMET,allocator<MyMET> >::iterator*) G__int(libp->para[0])), *(MyMET*) libp->para[1].ref);
         pobj = new vector<MyMET,allocator<MyMET> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->insert(*((vector<MyMET,allocator<MyMET> >::iterator*) G__int(libp->para[0])), *((vector<MyMET,allocator<MyMET> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyMET,allocator<MyMET> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->insert(*((vector<MyMET,allocator<MyMET> >::iterator*) G__int(libp->para[0])), (vector<MyMET,allocator<MyMET> >::size_type) G__int(libp->para[1])
, *(MyMET*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->erase(*((vector<MyMET,allocator<MyMET> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->erase(*((vector<MyMET,allocator<MyMET> >::iterator*) G__int(libp->para[0])), *((vector<MyMET,allocator<MyMET> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMET,allocator<MyMET> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyMET,allocator<MyMET> > G__TvectorlEMyMETcOallocatorlEMyMETgRsPgR;
static int G__eventdict_535_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyMET,allocator<MyMET> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyMET,allocator<MyMET> >*) (soff+(sizeof(vector<MyMET,allocator<MyMET> >)*i)))->~G__TvectorlEMyMETcOallocatorlEMyMETgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyMET,allocator<MyMET> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyMET,allocator<MyMET> >*) (soff))->~G__TvectorlEMyMETcOallocatorlEMyMETgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyVertex,allocator<MyVertex> > */
static int G__eventdict_539_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >::reference obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::const_reference obj = ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->end();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *((MyVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >::reference obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::const_reference obj = ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >[n];
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >;
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator=(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->reserve((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->push_back(*(MyVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->swap(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *(MyVertex*) libp->para[1].ref);
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), (vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[1])
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_539_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyVertex,allocator<MyVertex> > G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR;
static int G__eventdict_539_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyVertex,allocator<MyVertex> >*) (soff+(sizeof(vector<MyVertex,allocator<MyVertex> >)*i)))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyVertex,allocator<MyVertex> >*) (soff))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyMCParticle,allocator<MyMCParticle> > */
static int G__eventdict_543_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMCParticle,allocator<MyMCParticle> >::reference obj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->at((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMCParticle,allocator<MyMCParticle> >::const_reference obj = ((const vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->at((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMCParticle,allocator<MyMCParticle> >::iterator* pobj;
         vector<MyMCParticle,allocator<MyMCParticle> >::iterator xobj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->begin();
         pobj = new vector<MyMCParticle,allocator<MyMCParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMCParticle,allocator<MyMCParticle> >::iterator* pobj;
         vector<MyMCParticle,allocator<MyMCParticle> >::iterator xobj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->end();
         pobj = new vector<MyMCParticle,allocator<MyMCParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator* pobj;
         vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator xobj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator* pobj;
         vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator xobj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->rend();
         pobj = new vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->resize((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->resize((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]), *((MyMCParticle*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMCParticle,allocator<MyMCParticle> >::reference obj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->operator[]((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMCParticle,allocator<MyMCParticle> >::const_reference obj = ((const vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->operator[]((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMCParticle,allocator<MyMCParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMCParticle,allocator<MyMCParticle> >[n];
     } else {
       p = new((void*) gvp) vector<MyMCParticle,allocator<MyMCParticle> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMCParticle,allocator<MyMCParticle> >;
     } else {
       p = new((void*) gvp) vector<MyMCParticle,allocator<MyMCParticle> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMCParticle,allocator<MyMCParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMCParticle,allocator<MyMCParticle> >((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]), *(MyMCParticle*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyMCParticle,allocator<MyMCParticle> >((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]), *(MyMCParticle*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMCParticle,allocator<MyMCParticle> >((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyMCParticle,allocator<MyMCParticle> >((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMCParticle,allocator<MyMCParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMCParticle,allocator<MyMCParticle> >(*(vector<MyMCParticle,allocator<MyMCParticle> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyMCParticle,allocator<MyMCParticle> >(*(vector<MyMCParticle,allocator<MyMCParticle> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMCParticle,allocator<MyMCParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMCParticle,allocator<MyMCParticle> >(*((vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyMCParticle,allocator<MyMCParticle> >(*((vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMCParticle,allocator<MyMCParticle> >& obj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->operator=(*(vector<MyMCParticle,allocator<MyMCParticle> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->reserve((vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMCParticle& obj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMCParticle& obj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->push_back(*(MyMCParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->swap(*(vector<MyMCParticle,allocator<MyMCParticle> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMCParticle,allocator<MyMCParticle> >::iterator* pobj;
         vector<MyMCParticle,allocator<MyMCParticle> >::iterator xobj = ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->insert(*((vector<MyMCParticle,allocator<MyMCParticle> >::iterator*) G__int(libp->para[0])), *(MyMCParticle*) libp->para[1].ref);
         pobj = new vector<MyMCParticle,allocator<MyMCParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->insert(*((vector<MyMCParticle,allocator<MyMCParticle> >::iterator*) G__int(libp->para[0])), *((vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->insert(*((vector<MyMCParticle,allocator<MyMCParticle> >::iterator*) G__int(libp->para[0])), (vector<MyMCParticle,allocator<MyMCParticle> >::size_type) G__int(libp->para[1])
, *(MyMCParticle*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->erase(*((vector<MyMCParticle,allocator<MyMCParticle> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->erase(*((vector<MyMCParticle,allocator<MyMCParticle> >::iterator*) G__int(libp->para[0])), *((vector<MyMCParticle,allocator<MyMCParticle> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_543_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMCParticle,allocator<MyMCParticle> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyMCParticle,allocator<MyMCParticle> > G__TvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR;
static int G__eventdict_543_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyMCParticle,allocator<MyMCParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyMCParticle,allocator<MyMCParticle> >*) (soff+(sizeof(vector<MyMCParticle,allocator<MyMCParticle> >)*i)))->~G__TvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyMCParticle,allocator<MyMCParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyMCParticle,allocator<MyMCParticle> >*) (soff))->~G__TvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyKineFitParticle,allocator<MyKineFitParticle> > */
static int G__eventdict_547_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reference obj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->at((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_reference obj = ((const vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->at((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator* pobj;
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator xobj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->begin();
         pobj = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator* pobj;
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator xobj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->end();
         pobj = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator* pobj;
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator xobj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator* pobj;
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator xobj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->rend();
         pobj = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->resize((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->resize((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]), *((MyKineFitParticle*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reference obj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->operator[]((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_reference obj = ((const vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->operator[]((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyKineFitParticle,allocator<MyKineFitParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >[n];
     } else {
       p = new((void*) gvp) vector<MyKineFitParticle,allocator<MyKineFitParticle> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >;
     } else {
       p = new((void*) gvp) vector<MyKineFitParticle,allocator<MyKineFitParticle> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyKineFitParticle,allocator<MyKineFitParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]), *(MyKineFitParticle*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyKineFitParticle,allocator<MyKineFitParticle> >((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]), *(MyKineFitParticle*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyKineFitParticle,allocator<MyKineFitParticle> >((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyKineFitParticle,allocator<MyKineFitParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >(*(vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyKineFitParticle,allocator<MyKineFitParticle> >(*(vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyKineFitParticle,allocator<MyKineFitParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >(*((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyKineFitParticle,allocator<MyKineFitParticle> >(*((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyKineFitParticle,allocator<MyKineFitParticle> >& obj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->operator=(*(vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->reserve((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyKineFitParticle& obj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyKineFitParticle& obj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->push_back(*(MyKineFitParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->swap(*(vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator* pobj;
         vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator xobj = ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->insert(*((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator*) G__int(libp->para[0])), *(MyKineFitParticle*) libp->para[1].ref);
         pobj = new vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->insert(*((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator*) G__int(libp->para[0])), *((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->insert(*((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator*) G__int(libp->para[0])), (vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type) G__int(libp->para[1])
, *(MyKineFitParticle*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->erase(*((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->erase(*((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator*) G__int(libp->para[0])), *((vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_547_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyKineFitParticle,allocator<MyKineFitParticle> > G__TvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR;
static int G__eventdict_547_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) (soff+(sizeof(vector<MyKineFitParticle,allocator<MyKineFitParticle> >)*i)))->~G__TvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyKineFitParticle,allocator<MyKineFitParticle> >*) (soff))->~G__TvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Reader */
static int G__eventdict_848_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Reader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Reader[n];
     } else {
       p = new((void*) gvp) Reader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Reader;
     } else {
       p = new((void*) gvp) Reader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_Reader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((Reader*) G__getstructoffset())->AssignEventTreeFrom((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 104, (long) ((Reader*) G__getstructoffset())->AssignEventTreeFrom((TFile*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((Reader*) G__getstructoffset())->AssignEventTreeFromList((const char*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 104, (long) ((Reader*) G__getstructoffset())->AssignEventTreeFromList((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Reader*) G__getstructoffset())->GetNewEvent((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Reader*) G__getstructoffset())->GetNewEventFromList((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((Reader*) G__getstructoffset())->LoadTree((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet>* pobj;
         vector<MyJet> xobj = ((Reader*) G__getstructoffset())->getJets((MyEvent*) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
         pobj = new vector<MyJet>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron>* pobj;
         vector<MyElectron> xobj = ((Reader*) G__getstructoffset())->getElectrons((MyEvent*) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
         pobj = new vector<MyElectron>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon>* pobj;
         vector<MyMuon> xobj = ((Reader*) G__getstructoffset())->getMuons((MyEvent*) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
         pobj = new vector<MyMuon>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTau>* pobj;
         vector<MyTau> xobj = ((Reader*) G__getstructoffset())->getTaus((MyEvent*) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
         pobj = new vector<MyTau>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         MyMET* pobj;
         MyMET xobj = ((Reader*) G__getstructoffset())->getMET((MyEvent*) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
         pobj = new MyMET(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Reader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Reader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Reader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Reader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Reader*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Reader*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Reader*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Reader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Reader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Reader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Reader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_848_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Reader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_848_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Reader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Reader(*(Reader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_Reader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Reader G__TReader;
static int G__eventdict_848_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Reader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Reader*) (soff+(sizeof(Reader)*i)))->~G__TReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Reader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Reader*) (soff))->~G__TReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_848_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Reader* dest = (Reader*) G__getstructoffset();
   *dest = *(Reader*) libp->para[0].ref;
   const Reader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BtagSF */
static int G__eventdict_868_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BtagSF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BtagSF((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) BtagSF((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new BtagSF[n];
       } else {
         p = new((void*) gvp) BtagSF[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new BtagSF;
       } else {
         p = new((void*) gvp) BtagSF;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_BtagSF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((BtagSF*) G__getstructoffset())->isbtagged(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((BtagSF*) G__getstructoffset())->getSFb((Float_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((BtagSF*) G__getstructoffset())->getSFc((Float_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((BtagSF*) G__getstructoffset())->getSFl((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((BtagSF*) G__getstructoffset())->getMistag((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BtagSF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BtagSF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BtagSF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BtagSF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const BtagSF*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BtagSF*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BtagSF*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BtagSF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BtagSF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BtagSF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BtagSF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_868_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BtagSF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_868_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BtagSF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BtagSF(*(BtagSF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_BtagSF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BtagSF G__TBtagSF;
static int G__eventdict_868_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BtagSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BtagSF*) (soff+(sizeof(BtagSF)*i)))->~G__TBtagSF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BtagSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BtagSF*) (soff))->~G__TBtagSF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_868_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BtagSF* dest = (BtagSF*) G__getstructoffset();
   *dest = *(BtagSF*) libp->para[0].ref;
   const BtagSF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SVEffUnc */
static int G__eventdict_870_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SVEffUnc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SVEffUnc[n];
     } else {
       p = new((void*) gvp) SVEffUnc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SVEffUnc;
     } else {
       p = new((void*) gvp) SVEffUnc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_SVEffUnc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SVEffUnc*) G__getstructoffset())->getUncC((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SVEffUnc*) G__getstructoffset())->getUncL((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SVEffUnc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SVEffUnc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SVEffUnc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SVEffUnc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SVEffUnc*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SVEffUnc*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SVEffUnc*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SVEffUnc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SVEffUnc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SVEffUnc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SVEffUnc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_870_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SVEffUnc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_870_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SVEffUnc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SVEffUnc(*(SVEffUnc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_SVEffUnc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SVEffUnc G__TSVEffUnc;
static int G__eventdict_870_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SVEffUnc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SVEffUnc*) (soff+(sizeof(SVEffUnc)*i)))->~G__TSVEffUnc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SVEffUnc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SVEffUnc*) (soff))->~G__TSVEffUnc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_870_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SVEffUnc* dest = (SVEffUnc*) G__getstructoffset();
   *dest = *(SVEffUnc*) libp->para[0].ref;
   const SVEffUnc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* UncertaintyComputer */
static int G__eventdict_871_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UncertaintyComputer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UncertaintyComputer[n];
     } else {
       p = new((void*) gvp) UncertaintyComputer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UncertaintyComputer;
     } else {
       p = new((void*) gvp) UncertaintyComputer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithJES(*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *((MyMET*) G__int(libp->para[2])), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithJES(*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *((MyMET*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithJER(*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *((MyMET*) G__int(libp->para[2])), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithJER(*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *((MyMET*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithJESJER(*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *((MyMET*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithJESJER(*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *((MyMET*) G__int(libp->para[2])), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithJESJER(*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *((MyMET*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithUncl(
*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *(vector<MyMuon>*) libp->para[2].ref, (vector<int>*) G__int(libp->para[3])
, *(vector<MyElectron>*) libp->para[4].ref, (vector<int>*) G__int(libp->para[5])
, *((MyMET*) G__int(libp->para[6])), (int) G__int(libp->para[7])));
      break;
   case 7:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->metWithUncl(
*(vector<MyJet>*) libp->para[0].ref, (vector<int>*) G__int(libp->para[1])
, *(vector<MyMuon>*) libp->para[2].ref, (vector<int>*) G__int(libp->para[3])
, *(vector<MyElectron>*) libp->para[4].ref, (vector<int>*) G__int(libp->para[5])
, *((MyMET*) G__int(libp->para[6]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->getJERSF((double) G__double(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->getJERSF((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->jetPtWithJESJER(*((MyJet*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->jetPtWithJESJER(*((MyJet*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->jetPtWithJESJER(*((MyJet*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((UncertaintyComputer*) G__getstructoffset())->getBtagWithSF(*((MyJet*) G__int(libp->para[0])), (bool) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((UncertaintyComputer*) G__getstructoffset())->EffUncOnSV(*((MyJet*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) UncertaintyComputer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UncertaintyComputer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) UncertaintyComputer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      UncertaintyComputer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const UncertaintyComputer*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UncertaintyComputer*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UncertaintyComputer*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UncertaintyComputer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UncertaintyComputer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UncertaintyComputer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UncertaintyComputer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_871_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UncertaintyComputer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_871_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   UncertaintyComputer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new UncertaintyComputer(*(UncertaintyComputer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef UncertaintyComputer G__TUncertaintyComputer;
static int G__eventdict_871_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (UncertaintyComputer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((UncertaintyComputer*) (soff+(sizeof(UncertaintyComputer)*i)))->~G__TUncertaintyComputer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (UncertaintyComputer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((UncertaintyComputer*) (soff))->~G__TUncertaintyComputer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_871_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UncertaintyComputer* dest = (UncertaintyComputer*) G__getstructoffset();
   *dest = *(UncertaintyComputer*) libp->para[0].ref;
   const UncertaintyComputer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ObjectSelector */
static int G__eventdict_873_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ObjectSelector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ObjectSelector[n];
     } else {
       p = new((void*) gvp) ObjectSelector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ObjectSelector;
     } else {
       p = new((void*) gvp) ObjectSelector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_ObjectSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ObjectSelector*) G__getstructoffset())->setDefaultSelection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((ObjectSelector*) G__getstructoffset())->preSelectElectrons((vector<int>*) G__int(libp->para[0]), *(vector<MyElectron>*) libp->para[1].ref
, *(MyVertex*) libp->para[2].ref, (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((ObjectSelector*) G__getstructoffset())->preSelectElectrons((vector<int>*) G__int(libp->para[0]), *(vector<MyElectron>*) libp->para[1].ref
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((ObjectSelector*) G__getstructoffset())->preSelectMuons((vector<int>*) G__int(libp->para[0]), *(vector<MyMuon>*) libp->para[1].ref
, *(MyVertex*) libp->para[2].ref, (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((ObjectSelector*) G__getstructoffset())->preSelectMuons((vector<int>*) G__int(libp->para[0]), *(vector<MyMuon>*) libp->para[1].ref
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((ObjectSelector*) G__getstructoffset())->preSelectMuonsNoIso((vector<int>*) G__int(libp->para[0]), *(vector<MyMuon>*) libp->para[1].ref
, *(MyVertex*) libp->para[2].ref, (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((ObjectSelector*) G__getstructoffset())->preSelectMuonsNoIso((vector<int>*) G__int(libp->para[0]), *(vector<MyMuon>*) libp->para[1].ref
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((ObjectSelector*) G__getstructoffset())->preSelectJets(*((string*) G__int(libp->para[0])), (vector<int>*) G__int(libp->para[1])
, *(vector<MyJet>*) libp->para[2].ref, (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((ObjectSelector*) G__getstructoffset())->preSelectJets(*((string*) G__int(libp->para[0])), (vector<int>*) G__int(libp->para[1])
, *(vector<MyJet>*) libp->para[2].ref, (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((ObjectSelector*) G__getstructoffset())->preSelectJets(*((string*) G__int(libp->para[0])), (vector<int>*) G__int(libp->para[1])
, *(vector<MyJet>*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ObjectSelector*) G__getstructoffset())->preSelectTaus((vector<int>*) G__int(libp->para[0]), *(vector<MyTau>*) libp->para[1].ref
, (int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, *(MyVertex*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((ObjectSelector*) G__getstructoffset())->looseElectronVeto((int) G__int(libp->para[0]), *(vector<MyElectron>*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((ObjectSelector*) G__getstructoffset())->looseElectronVeto((int) G__int(libp->para[0]), *(vector<MyElectron>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((ObjectSelector*) G__getstructoffset())->looseMuonVeto((int) G__int(libp->para[0]), *(vector<MyMuon>*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((ObjectSelector*) G__getstructoffset())->looseMuonVeto((int) G__int(libp->para[0]), *(vector<MyMuon>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ObjectSelector*) G__getstructoffset())->ElectronCleaning(*(vector<MyElectron>*) libp->para[0].ref, *(vector<MyMuon>*) libp->para[1].ref
, (vector<int>*) G__int(libp->para[2]), (vector<int>*) G__int(libp->para[3])
, (vector<int>*) G__int(libp->para[4]), (double) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ObjectSelector*) G__getstructoffset())->TauCleaning(
*(vector<MyTau>*) libp->para[0].ref, *(vector<MyMuon>*) libp->para[1].ref
, *(vector<MyElectron>*) libp->para[2].ref, (vector<int>*) G__int(libp->para[3])
, (vector<int>*) G__int(libp->para[4]), (vector<int>*) G__int(libp->para[5])
, (vector<int>*) G__int(libp->para[6]), (double) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      ((ObjectSelector*) G__getstructoffset())->JetCleaning(
*(vector<MyJet>*) libp->para[0].ref, *(vector<MyMuon>*) libp->para[1].ref
, *(vector<MyElectron>*) libp->para[2].ref, *(vector<MyTau>*) libp->para[3].ref
, (vector<int>*) G__int(libp->para[4]), (vector<int>*) G__int(libp->para[5])
, (vector<int>*) G__int(libp->para[6]), (vector<int>*) G__int(libp->para[7])
, (vector<int>*) G__int(libp->para[8]), (double) G__double(libp->para[9])
, (bool) G__int(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((ObjectSelector*) G__getstructoffset())->JetCleaning(
*(vector<MyJet>*) libp->para[0].ref, *(vector<MyMuon>*) libp->para[1].ref
, *(vector<MyElectron>*) libp->para[2].ref, *(vector<MyTau>*) libp->para[3].ref
, (vector<int>*) G__int(libp->para[4]), (vector<int>*) G__int(libp->para[5])
, (vector<int>*) G__int(libp->para[6]), (vector<int>*) G__int(libp->para[7])
, (vector<int>*) G__int(libp->para[8]), (double) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((ObjectSelector*) G__getstructoffset())->DeltaR(*((MyLorentzVector*) G__int(libp->para[0])), *((MyLorentzVector*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ObjectSelector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ObjectSelector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ObjectSelector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ObjectSelector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ObjectSelector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ObjectSelector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ObjectSelector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ObjectSelector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_873_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ObjectSelector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_873_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ObjectSelector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ObjectSelector(*(ObjectSelector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_ObjectSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ObjectSelector G__TObjectSelector;
static int G__eventdict_873_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ObjectSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ObjectSelector*) (soff+(sizeof(ObjectSelector)*i)))->~G__TObjectSelector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ObjectSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ObjectSelector*) (soff))->~G__TObjectSelector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_873_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ObjectSelector* dest = (ObjectSelector*) G__getstructoffset();
   *dest = *(ObjectSelector*) libp->para[0].ref;
   const ObjectSelector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HistogramPlotter */
static int G__eventdict_874_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistogramPlotter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HistogramPlotter[n];
     } else {
       p = new((void*) gvp) HistogramPlotter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HistogramPlotter;
     } else {
       p = new((void*) gvp) HistogramPlotter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_HistogramPlotter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramPlotter*) G__getstructoffset())->InitHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (TFile*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramPlotter*) G__getstructoffset())->addHisto(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramPlotter*) G__getstructoffset())->add2DHisto(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HistogramPlotter*) G__getstructoffset())->fillHisto(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HistogramPlotter*) G__getstructoffset())->fillHisto(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HistogramPlotter*) G__getstructoffset())->getHisto(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HistogramPlotter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistogramPlotter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HistogramPlotter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HistogramPlotter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HistogramPlotter*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramPlotter*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramPlotter*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramPlotter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistogramPlotter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistogramPlotter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistogramPlotter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_874_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistogramPlotter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_874_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HistogramPlotter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HistogramPlotter(*(HistogramPlotter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_HistogramPlotter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HistogramPlotter G__THistogramPlotter;
static int G__eventdict_874_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HistogramPlotter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HistogramPlotter*) (soff+(sizeof(HistogramPlotter)*i)))->~G__THistogramPlotter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HistogramPlotter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HistogramPlotter*) (soff))->~G__THistogramPlotter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_874_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistogramPlotter* dest = (HistogramPlotter*) G__getstructoffset();
   *dest = *(HistogramPlotter*) libp->para[0].ref;
   const HistogramPlotter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyTrack,allocator<MyTrack> > */
static int G__eventdict_892_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTrack,allocator<MyTrack> >::reference obj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->at((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrack,allocator<MyTrack> >::const_reference obj = ((const vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->at((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrack,allocator<MyTrack> >::iterator* pobj;
         vector<MyTrack,allocator<MyTrack> >::iterator xobj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->begin();
         pobj = new vector<MyTrack,allocator<MyTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrack,allocator<MyTrack> >::iterator* pobj;
         vector<MyTrack,allocator<MyTrack> >::iterator xobj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->end();
         pobj = new vector<MyTrack,allocator<MyTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrack,allocator<MyTrack> >::reverse_iterator* pobj;
         vector<MyTrack,allocator<MyTrack> >::reverse_iterator xobj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyTrack,allocator<MyTrack> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrack,allocator<MyTrack> >::reverse_iterator* pobj;
         vector<MyTrack,allocator<MyTrack> >::reverse_iterator xobj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->rend();
         pobj = new vector<MyTrack,allocator<MyTrack> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->resize((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->resize((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]), *((MyTrack*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTrack,allocator<MyTrack> >::reference obj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->operator[]((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrack,allocator<MyTrack> >::const_reference obj = ((const vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->operator[]((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrack,allocator<MyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrack,allocator<MyTrack> >[n];
     } else {
       p = new((void*) gvp) vector<MyTrack,allocator<MyTrack> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrack,allocator<MyTrack> >;
     } else {
       p = new((void*) gvp) vector<MyTrack,allocator<MyTrack> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrack,allocator<MyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrack,allocator<MyTrack> >((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]), *(MyTrack*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyTrack,allocator<MyTrack> >((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]), *(MyTrack*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrack,allocator<MyTrack> >((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyTrack,allocator<MyTrack> >((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrack,allocator<MyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTrack,allocator<MyTrack> >(*(vector<MyTrack,allocator<MyTrack> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyTrack,allocator<MyTrack> >(*(vector<MyTrack,allocator<MyTrack> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrack,allocator<MyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTrack,allocator<MyTrack> >(*((vector<MyTrack,allocator<MyTrack> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTrack,allocator<MyTrack> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyTrack,allocator<MyTrack> >(*((vector<MyTrack,allocator<MyTrack> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTrack,allocator<MyTrack> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTrack,allocator<MyTrack> >& obj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->operator=(*(vector<MyTrack,allocator<MyTrack> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->reserve((vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrack& obj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrack& obj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->push_back(*(MyTrack*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->swap(*(vector<MyTrack,allocator<MyTrack> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrack,allocator<MyTrack> >::iterator* pobj;
         vector<MyTrack,allocator<MyTrack> >::iterator xobj = ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->insert(*((vector<MyTrack,allocator<MyTrack> >::iterator*) G__int(libp->para[0])), *(MyTrack*) libp->para[1].ref);
         pobj = new vector<MyTrack,allocator<MyTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->insert(*((vector<MyTrack,allocator<MyTrack> >::iterator*) G__int(libp->para[0])), *((vector<MyTrack,allocator<MyTrack> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyTrack,allocator<MyTrack> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->insert(*((vector<MyTrack,allocator<MyTrack> >::iterator*) G__int(libp->para[0])), (vector<MyTrack,allocator<MyTrack> >::size_type) G__int(libp->para[1])
, *(MyTrack*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->erase(*((vector<MyTrack,allocator<MyTrack> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->erase(*((vector<MyTrack,allocator<MyTrack> >::iterator*) G__int(libp->para[0])), *((vector<MyTrack,allocator<MyTrack> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_892_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrack,allocator<MyTrack> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyTrack,allocator<MyTrack> > G__TvectorlEMyTrackcOallocatorlEMyTrackgRsPgR;
static int G__eventdict_892_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyTrack,allocator<MyTrack> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyTrack,allocator<MyTrack> >*) (soff+(sizeof(vector<MyTrack,allocator<MyTrack> >)*i)))->~G__TvectorlEMyTrackcOallocatorlEMyTrackgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyTrack,allocator<MyTrack> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyTrack,allocator<MyTrack> >*) (soff))->~G__TvectorlEMyTrackcOallocatorlEMyTrackgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MyJet */

/* MyMET */

/* MyTrack */

/* MyVertex */

/* MyElectron */

/* MyMuon */

/* MyTau */

/* MyMCParticle */

/* SampleInfo */

/* MyKineFitParticle */

/* MyEvent */

/* vector<MyElectron,allocator<MyElectron> > */

/* vector<MyMuon,allocator<MyMuon> > */

/* vector<MyJet,allocator<MyJet> > */

/* vector<MyTau,allocator<MyTau> > */

/* vector<MyMET,allocator<MyMET> > */

/* vector<MyVertex,allocator<MyVertex> > */

/* vector<MyMCParticle,allocator<MyMCParticle> > */

/* vector<MyKineFitParticle,allocator<MyKineFitParticle> > */

/* Reader */

/* BtagSF */

/* SVEffUnc */

/* UncertaintyComputer */

/* ObjectSelector */

/* HistogramPlotter */

/* vector<MyTrack,allocator<MyTrack> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunceventdict {
 public:
  G__Sizep2memfunceventdict(): p(&G__Sizep2memfunceventdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunceventdict::*p)();
};

size_t G__get_sizep2memfunceventdict()
{
  G__Sizep2memfunceventdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceeventdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_ObjectSelector))) {
     ObjectSelector *G__Lderived;
     G__Lderived=(ObjectSelector*)0x1000;
     {
       UncertaintyComputer *G__Lpbase=(UncertaintyComputer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_ObjectSelector),G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableeventdict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double> >",117,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MyLorentzVector",117,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyLorentzVector>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,double>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,float>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyElectron>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyElectron),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyMuon>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMuon),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyTau>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyTau),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTau),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTau),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTau),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTau),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyMET>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyMET),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMET),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMET),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMET),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMET),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyVertex>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyMCParticle>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyMCParticle),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMCParticle),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMCParticle),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMCParticle),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMCParticle),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyKineFitParticle>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1*>",117,G__get_linked_tagnum(&G__eventdictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1*,less<TString> >",117,G__get_linked_tagnum(&G__eventdictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH2*>",117,G__get_linked_tagnum(&G__eventdictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH2*,less<TString> >",117,G__get_linked_tagnum(&G__eventdictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyTrack>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyTrack),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTrack),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTrack),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTrack),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTrack),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MyJet */
static void G__setup_memvarMyJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet));
   { MyJet *p; p=(MyJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->p4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4=",0,"4 vector of jet.");
   G__memvar_setup((void*)((long)(&p->SVP4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<MyLorentzVector>"),-1,1,"SVP4=",0,"4 vector of secondary vertices");
   G__memvar_setup((void*)((long)(&p->SVflightDistance)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"SVflightDistance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SVflightDistanceErr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"SVflightDistanceErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SVNChi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"SVNChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Genp4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"Genp4=",0,"4 vector of matched genJet");
   G__memvar_setup((void*)((long)(&p->JECs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<std::string,double>"),-1,1,"JECs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JECUncertainty)-(long)(p)),100,0,0,-1,-1,-1,1,"JECUncertainty=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"jetName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->parton_id)-(long)(p)),105,0,0,-1,-1,-1,1,"parton_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->parton_mother_id)-(long)(p)),105,0,0,-1,-1,-1,1,"parton_mother_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->partonFlavour)-(long)(p)),105,0,0,-1,-1,-1,1,"partonFlavour=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->triggerJet_pt)-(long)(p)),100,0,0,-1,-1,-1,1,"triggerJet_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bDiscriminator)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<std::string,double>"),-1,1,"bDiscriminator=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DistanceToClosestLepton)-(long)(p)),100,0,0,-1,-1,-1,1,"DistanceToClosestLepton=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetCharge)-(long)(p)),100,0,0,-1,-1,-1,1,"jetCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emEnergyFraction)-(long)(p)),100,0,0,-1,-1,-1,1,"emEnergyFraction=",0,"jet electromagnetic energy fraction  // ( not defined for pfjet)");
   G__memvar_setup((void*)((long)(&p->hadEnergyFraction)-(long)(p)),100,0,0,-1,-1,-1,1,"hadEnergyFraction=",0,"jet hadronic energy fraction");
   G__memvar_setup((void*)((long)(&p->CHEF)-(long)(p)),100,0,0,-1,-1,-1,1,"CHEF=",0,"Charged Hadronic Energy Fraction  ");
   G__memvar_setup((void*)((long)(&p->CEEF)-(long)(p)),100,0,0,-1,-1,-1,1,"CEEF=",0,"Charged Electromagnetic Energy Fraction  (for Pf jet ID)");
   G__memvar_setup((void*)((long)(&p->NHEF)-(long)(p)),100,0,0,-1,-1,-1,1,"NHEF=",0,"Neutral Hadronic Energy Fraction  ");
   G__memvar_setup((void*)((long)(&p->NEEF)-(long)(p)),100,0,0,-1,-1,-1,1,"NEEF=",0,"Neutral Electromagnetic Energy Fraction  ");
   G__memvar_setup((void*)((long)(&p->chargeMultiplicity)-(long)(p)),105,0,0,-1,-1,-1,1,"chargeMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NumberOfDoughters)-(long)(p)),105,0,0,-1,-1,-1,1,"NumberOfDoughters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n90Hits)-(long)(p)),100,0,0,-1,-1,-1,1,"n90Hits=",0,"Number of recHits (i.e. cells) needed to make up 90% of the jet's energy ");
   G__memvar_setup((void*)((long)(&p->fHPD)-(long)(p)),100,0,0,-1,-1,-1,1,"fHPD=",0,"fraction of jet energy from the highest energy Hybrid Photo Diode (not for pfjet)");
   G__memvar_setup((void*)((long)(&p->fRBX)-(long)(p)),100,0,0,-1,-1,-1,1,"fRBX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RestrictedEMF)-(long)(p)),100,0,0,-1,-1,-1,1,"RestrictedEMF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHCALTowers)-(long)(p)),105,0,0,-1,-1,-1,1,"nHCALTowers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nECALTowers)-(long)(p)),105,0,0,-1,-1,-1,1,"nECALTowers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetIDLoose)-(long)(p)),103,0,0,-1,-1,-1,1,"jetIDLoose=",0,"Loose jetId");
   G__memvar_setup((void*)((long)(&p->puIDMVALoose)-(long)(p)),105,0,0,-1,-1,-1,1,"puIDMVALoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDMVAMedium)-(long)(p)),105,0,0,-1,-1,-1,1,"puIDMVAMedium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDMVATight)-(long)(p)),105,0,0,-1,-1,-1,1,"puIDMVATight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDMVADiscr)-(long)(p)),102,0,0,-1,-1,-1,1,"puIDMVADiscr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTracks)-(long)(p)),105,0,0,-1,-1,-1,1,"nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lead_track_pt)-(long)(p)),100,0,0,-1,-1,-1,1,"lead_track_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lead_track_charge)-(long)(p)),100,0,0,-1,-1,-1,1,"lead_track_charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lead_track_d0)-(long)(p)),100,0,0,-1,-1,-1,1,"lead_track_d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lead_track_d0_Significance)-(long)(p)),100,0,0,-1,-1,-1,1,"lead_track_d0_Significance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaetaMoment)-(long)(p)),100,0,0,-1,-1,-1,1,"etaetaMoment=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiphiMoment)-(long)(p)),100,0,0,-1,-1,-1,1,"phiphiMoment=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),105,0,0,-1,-1,-1,1,"quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"vertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_vertex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"tau_vertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_againstElectronLoose)-(long)(p)),102,0,0,-1,-1,-1,1,"tau_againstElectronLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_againstElectronMedium)-(long)(p)),102,0,0,-1,-1,-1,1,"tau_againstElectronMedium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_againstElectronTight)-(long)(p)),102,0,0,-1,-1,-1,1,"tau_againstElectronTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_againstElectronMVA)-(long)(p)),102,0,0,-1,-1,-1,1,"tau_againstElectronMVA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_againstMuonLoose)-(long)(p)),102,0,0,-1,-1,-1,1,"tau_againstMuonLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_againstMuonMedium)-(long)(p)),102,0,0,-1,-1,-1,1,"tau_againstMuonMedium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau_againstMuonTight)-(long)(p)),102,0,0,-1,-1,-1,1,"tau_againstMuonTight=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyMET */
static void G__setup_memvarMyMET(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyMET));
   { MyMET *p; p=(MyMET*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->metName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"metName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4=",0,"missing Et vector -->> 4D vector since no 2D object available in [root/5.14.00f-CMS3q] ...");
   G__memvar_setup((void*)((long)(&p->sumEt)-(long)(p)),100,0,0,-1,-1,-1,1,"sumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->metSignificance)-(long)(p)),100,0,0,-1,-1,-1,1,"metSignificance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emEtFraction)-(long)(p)),100,0,0,-1,-1,-1,1,"emEtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadEtFraction)-(long)(p)),100,0,0,-1,-1,-1,1,"hadEtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonEtFraction)-(long)(p)),100,0,0,-1,-1,-1,1,"muonEtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isPFMET)-(long)(p)),103,0,0,-1,-1,-1,1,"isPFMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isCaloMET)-(long)(p)),103,0,0,-1,-1,-1,1,"isCaloMET=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyTrack */
static void G__setup_memvarMyTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrack));
   { MyTrack *p; p=(MyTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->p4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackCharge)-(long)(p)),100,0,0,-1,-1,-1,1,"trackCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chiSquared)-(long)(p)),100,0,0,-1,-1,-1,1,"chiSquared=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHits)-(long)(p)),100,0,0,-1,-1,-1,1,"nHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPixHits)-(long)(p)),100,0,0,-1,-1,-1,1,"nPixHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->particleType)-(long)(p)),100,0,0,-1,-1,-1,1,"particleType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0)-(long)(p)),100,0,0,-1,-1,-1,1,"d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0Error)-(long)(p)),100,0,0,-1,-1,-1,1,"d0Error=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyVertex */
static void G__setup_memvarMyVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   { MyVertex *p; p=(MyVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->XYZ)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"XYZ=",0,"position");
   G__memvar_setup((void*)((long)(&p->ErrXYZ)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"ErrXYZ=",0,"error position");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),100,0,0,-1,-1,-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isFake)-(long)(p)),105,0,0,-1,-1,-1,1,"isFake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isValid)-(long)(p)),105,0,0,-1,-1,-1,1,"isValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),100,0,0,-1,-1,-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rho)-(long)(p)),100,0,0,-1,-1,-1,1,"rho=",0,"for maxd0 selection (<2)");
   G__memvar_setup((void*)((long)(&p->normalizedChi2)-(long)(p)),100,0,0,-1,-1,-1,1,"normalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NumberOfTracks)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"NumberOfTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fracHighPurity)-(long)(p)),100,0,0,-1,-1,-1,1,"fracHighPurity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumpt)-(long)(p)),100,0,0,-1,-1,-1,1,"sumpt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyElectron */
static void G__setup_memvarMyElectron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   { MyElectron *p; p=(MyElectron*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_id)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_mother_id)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_mother_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"vertex=",0,"vertex position");
   G__memvar_setup((void*)((long)(&p->isEcalDriven)-(long)(p)),105,0,0,-1,-1,-1,1,"isEcalDriven=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isTrackerDriven)-(long)(p)),105,0,0,-1,-1,-1,1,"isTrackerDriven=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isPFlow)-(long)(p)),105,0,0,-1,-1,-1,1,"isPFlow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eidWPs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),G__defined_typename("map<std::string,float>"),-1,1,"eidWPs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSuperClusterOverP)-(long)(p)),100,0,0,-1,-1,-1,1,"eSuperClusterOverP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaEtaSeedClusterTrackAtCalo)-(long)(p)),100,0,0,-1,-1,-1,1,"deltaEtaSeedClusterTrackAtCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiSeedClusterTrackAtCalo)-(long)(p)),100,0,0,-1,-1,-1,1,"deltaPhiSeedClusterTrackAtCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaEtaSuperClusterTrackAtVtx)-(long)(p)),100,0,0,-1,-1,-1,1,"deltaEtaSuperClusterTrackAtVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiSuperClusterTrackAtVtx)-(long)(p)),100,0,0,-1,-1,-1,1,"deltaPhiSuperClusterTrackAtVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicOverEm)-(long)(p)),100,0,0,-1,-1,-1,1,"hadronicOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaIetaIeta)-(long)(p)),100,0,0,-1,-1,-1,1,"sigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fbrem)-(long)(p)),100,0,0,-1,-1,-1,1,"fbrem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sieta)-(long)(p)),100,0,0,-1,-1,-1,1,"sieta=",0,"sigma ieta-ieta ");
   G__memvar_setup((void*)((long)(&p->siphi)-(long)(p)),100,0,0,-1,-1,-1,1,"siphi=",0,"sigma iphi-iphi");
   G__memvar_setup((void*)((long)(&p->seedEnergy)-(long)(p)),100,0,0,-1,-1,-1,1,"seedEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e3x3)-(long)(p)),100,0,0,-1,-1,-1,1,"e3x3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e5x5)-(long)(p)),100,0,0,-1,-1,-1,1,"e5x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rookbfrac)-(long)(p)),100,0,0,-1,-1,-1,1,"rookbfrac=",0,"rook5B-fraction");
   G__memvar_setup((void*)((long)(&p->s4s1)-(long)(p)),100,0,0,-1,-1,-1,1,"s4s1=",0,"s4/s1 - swiss cross");
   G__memvar_setup((void*)((long)(&p->electronSCEt)-(long)(p)),100,0,0,-1,-1,-1,1,"electronSCEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electronSCEta)-(long)(p)),100,0,0,-1,-1,-1,1,"electronSCEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outOfTimeFlag)-(long)(p)),100,0,0,-1,-1,-1,1,"outOfTimeFlag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->seedTime)-(long)(p)),100,0,0,-1,-1,-1,1,"seedTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isEE)-(long)(p)),105,0,0,-1,-1,-1,1,"isEE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isEB)-(long)(p)),105,0,0,-1,-1,-1,1,"isEB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nLostHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nLostHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nLostPixelHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nLostPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normChi2)-(long)(p)),100,0,0,-1,-1,-1,1,"normChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrkIso)-(long)(p)),100,0,0,-1,-1,-1,1,"TrkIso=",0,"summed track pt in a cone of deltaR<0.3");
   G__memvar_setup((void*)((long)(&p->ECalIso)-(long)(p)),100,0,0,-1,-1,-1,1,"ECalIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HCalIso)-(long)(p)),100,0,0,-1,-1,-1,1,"HCalIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RelIso)-(long)(p)),100,0,0,-1,-1,-1,1,"RelIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrkIso04)-(long)(p)),100,0,0,-1,-1,-1,1,"TrkIso04=",0,"summed track pt in a cone of deltaR<0.4");
   G__memvar_setup((void*)((long)(&p->ECalIso04)-(long)(p)),100,0,0,-1,-1,-1,1,"ECalIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HCalIso04)-(long)(p)),100,0,0,-1,-1,-1,1,"HCalIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RelIso04)-(long)(p)),100,0,0,-1,-1,-1,1,"RelIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP3D)-(long)(p)),100,0,0,-1,-1,-1,1,"IP3D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP3DError)-(long)(p)),100,0,0,-1,-1,-1,1,"IP3DError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->D0)-(long)(p)),100,0,0,-1,-1,-1,1,"D0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->D0Error)-(long)(p)),100,0,0,-1,-1,-1,1,"D0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trigger_ele_pt)-(long)(p)),100,0,0,-1,-1,-1,1,"trigger_ele_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),105,0,0,-1,-1,-1,1,"quality=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyMuon */
static void G__setup_memvarMyMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   { MyMuon *p; p=(MyMuon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,-1,-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4=",0,"momentum");
   G__memvar_setup((void*)((long)(&p->vertex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"vertex=",0,"Beam spot  position");
   G__memvar_setup((void*)((long)(&p->gen_id)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_mother_id)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_mother_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->idPattern)-(long)(p)),105,0,0,-1,-1,-1,1,"idPattern=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HadEnergy)-(long)(p)),100,0,0,-1,-1,-1,1,"HadEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EmEnergy)-(long)(p)),100,0,0,-1,-1,-1,1,"EmEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrkIso)-(long)(p)),100,0,0,-1,-1,-1,1,"TrkIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ECaloIso)-(long)(p)),100,0,0,-1,-1,-1,1,"ECaloIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HCaloIso)-(long)(p)),100,0,0,-1,-1,-1,1,"HCaloIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RelIso)-(long)(p)),100,0,0,-1,-1,-1,1,"RelIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ChHadIso)-(long)(p)),100,0,0,-1,-1,-1,1,"ChHadIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PhotonIso)-(long)(p)),100,0,0,-1,-1,-1,1,"PhotonIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NeuHadIso)-(long)(p)),100,0,0,-1,-1,-1,1,"NeuHadIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PileupIso)-(long)(p)),100,0,0,-1,-1,-1,1,"PileupIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfRelIso)-(long)(p)),100,0,0,-1,-1,-1,1,"pfRelIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UserPFRelIso)-(long)(p)),100,0,0,-1,-1,-1,1,"UserPFRelIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GlobalMuonPromptTight)-(long)(p)),105,0,0,-1,-1,-1,1,"GlobalMuonPromptTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normChi2)-(long)(p)),100,0,0,-1,-1,-1,1,"normChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMuonHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nMuonHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPixelHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMatchedStations)-(long)(p)),105,0,0,-1,-1,-1,1,"nMatchedStations=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTrackerLayers)-(long)(p)),105,0,0,-1,-1,-1,1,"nTrackerLayers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inTrk_normChi2)-(long)(p)),100,0,0,-1,-1,-1,1,"inTrk_normChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inTrk_nHits)-(long)(p)),100,0,0,-1,-1,-1,1,"inTrk_nHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP3D)-(long)(p)),100,0,0,-1,-1,-1,1,"IP3D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP3DErr)-(long)(p)),100,0,0,-1,-1,-1,1,"IP3DErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->D0)-(long)(p)),100,0,0,-1,-1,-1,1,"D0=",0,"Transverse IP of globalTrack (tracker+mu) wrt BS (or 0 if !BS)");
   G__memvar_setup((void*)((long)(&p->D0Inner)-(long)(p)),100,0,0,-1,-1,-1,1,"D0Inner=",0,"Transverse IP of InnerTrack (tracker) wrt BS (or 0 if !BS)");
   G__memvar_setup((void*)((long)(&p->trigger_mu_pt)-(long)(p)),100,0,0,-1,-1,-1,1,"trigger_mu_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),105,0,0,-1,-1,-1,1,"quality=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyTau */
static void G__setup_memvarMyTau(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyTau));
   { MyTau *p; p=(MyTau*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tauAlgo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"tauAlgo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_id)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gen_mother_id)-(long)(p)),105,0,0,-1,-1,-1,1,"gen_mother_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"vertex=",0,"vertex position");
   G__memvar_setup((void*)((long)(&p->nSignalChargeHadron)-(long)(p)),100,0,0,-1,-1,-1,1,"nSignalChargeHadron=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leadChargedHadronPt)-(long)(p)),100,0,0,-1,-1,-1,1,"leadChargedHadronPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leadChargedHadronP)-(long)(p)),100,0,0,-1,-1,-1,1,"leadChargedHadronP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leadingParticlePt)-(long)(p)),100,0,0,-1,-1,-1,1,"leadingParticlePt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leadingParticleP)-(long)(p)),100,0,0,-1,-1,-1,1,"leadingParticleP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchJetPt)-(long)(p)),100,0,0,-1,-1,-1,1,"matchJetPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchJetEta)-(long)(p)),100,0,0,-1,-1,-1,1,"matchJetEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchJetPhi)-(long)(p)),100,0,0,-1,-1,-1,1,"matchJetPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchJetEMF)-(long)(p)),100,0,0,-1,-1,-1,1,"matchJetEMF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tauEMF)-(long)(p)),100,0,0,-1,-1,-1,1,"tauEMF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0_max)-(long)(p)),100,0,0,-1,-1,-1,1,"d0_max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0_max_err)-(long)(p)),100,0,0,-1,-1,-1,1,"d0_max_err=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayModeFinding)-(long)(p)),102,0,0,-1,-1,-1,1,"decayModeFinding=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LooseIsolation)-(long)(p)),102,0,0,-1,-1,-1,1,"LooseIsolation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LooseIsolationDeltaBetaCorr)-(long)(p)),102,0,0,-1,-1,-1,1,"LooseIsolationDeltaBetaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LooseCombinedIsolationDeltaBetaCorr)-(long)(p)),102,0,0,-1,-1,-1,1,"LooseCombinedIsolationDeltaBetaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MediumIsolation)-(long)(p)),102,0,0,-1,-1,-1,1,"MediumIsolation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MediumIsolationDeltaBetaCorr)-(long)(p)),102,0,0,-1,-1,-1,1,"MediumIsolationDeltaBetaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MediumCombinedIsolationDeltaBetaCorr)-(long)(p)),102,0,0,-1,-1,-1,1,"MediumCombinedIsolationDeltaBetaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TightIsolation)-(long)(p)),102,0,0,-1,-1,-1,1,"TightIsolation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TightIsolationDeltaBetaCorr)-(long)(p)),102,0,0,-1,-1,-1,1,"TightIsolationDeltaBetaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TightCombinedIsolationDeltaBetaCorr)-(long)(p)),102,0,0,-1,-1,-1,1,"TightCombinedIsolationDeltaBetaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->againstElectronLoose)-(long)(p)),102,0,0,-1,-1,-1,1,"againstElectronLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->againstElectronMedium)-(long)(p)),102,0,0,-1,-1,-1,1,"againstElectronMedium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->againstElectronTight)-(long)(p)),102,0,0,-1,-1,-1,1,"againstElectronTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->againstElectronMVA)-(long)(p)),102,0,0,-1,-1,-1,1,"againstElectronMVA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->againstMuonLoose)-(long)(p)),102,0,0,-1,-1,-1,1,"againstMuonLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->againstMuonMedium)-(long)(p)),102,0,0,-1,-1,-1,1,"againstMuonMedium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->againstMuonTight)-(long)(p)),102,0,0,-1,-1,-1,1,"againstMuonTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayMode)-(long)(p)),102,0,0,-1,-1,-1,1,"decayMode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyMCParticle */
static void G__setup_memvarMyMCParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyMCParticle));
   { MyMCParticle *p; p=(MyMCParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->p4Gen)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4Gen=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pid)-(long)(p)),105,0,0,-1,-1,-1,1,"pid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mother)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"mother=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,-1,-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->motherLine)-(long)(p)),105,0,0,-1,-1,-1,1,"motherLine=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SampleInfo */
static void G__setup_memvarSampleInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_SampleInfo));
   { SampleInfo *p; p=(SampleInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sampleName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"sampleName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcEvtType)-(long)(p)),105,0,0,-1,-1,-1,1,"mcEvtType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->truepileup)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"truepileup=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pileup)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"pileup=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puWeights)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"puWeights=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->topPtWeights)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"topPtWeights=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hepNUP)-(long)(p)),105,0,0,-1,-1,-1,1,"hepNUP=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyKineFitParticle */
static void G__setup_memvarMyKineFitParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle));
   { MyKineFitParticle *p; p=(MyKineFitParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->p4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),G__defined_typename("MyLorentzVector"),-1,1,"p4=",0,"4 vector");
   G__memvar_setup((void*)((long)(&p->vertex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),G__defined_typename("Point3D"),-1,1,"vertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->partName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"partName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->labelName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"labelName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->part_id)-(long)(p)),105,0,0,-1,-1,-1,1,"part_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->part_mother_id)-(long)(p)),105,0,0,-1,-1,-1,1,"part_mother_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2OfFit)-(long)(p)),100,0,0,-1,-1,-1,1,"chi2OfFit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->statusOfFit)-(long)(p)),100,0,0,-1,-1,-1,1,"statusOfFit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->probOfFit)-(long)(p)),100,0,0,-1,-1,-1,1,"probOfFit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->njetsOfFit)-(long)(p)),100,0,0,-1,-1,-1,1,"njetsOfFit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyEvent */
static void G__setup_memvarMyEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvent));
   { MyEvent *p; p=(MyEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("DATA=%lldLL",(long long)MyEvent::DATA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("TTBAR=%lldLL",(long long)MyEvent::TTBAR).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("ZJETS=%lldLL",(long long)MyEvent::ZJETS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("WJETS=%lldLL",(long long)MyEvent::WJETS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("TOPS=%lldLL",(long long)MyEvent::TOPS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("TOPT=%lldLL",(long long)MyEvent::TOPT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("TOPW=%lldLL",(long long)MyEvent::TOPW).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("QCD=%lldLL",(long long)MyEvent::QCD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("WW=%lldLL",(long long)MyEvent::WW).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("WZ=%lldLL",(long long)MyEvent::WZ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("ZZ=%lldLL",(long long)MyEvent::ZZ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLSampleType),-1,-2,1,G__FastAllocString(4096).Format("OTHER=%lldLL",(long long)MyEvent::OTHER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTUNKNOWN=%lldLL",(long long)MyEvent::TTUNKNOWN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTALLJETS=%lldLL",(long long)MyEvent::TTALLJETS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTEJETS=%lldLL",(long long)MyEvent::TTEJETS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTMUJETS=%lldLL",(long long)MyEvent::TTMUJETS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTTAUJETS=%lldLL",(long long)MyEvent::TTTAUJETS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTEE=%lldLL",(long long)MyEvent::TTEE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTEMU=%lldLL",(long long)MyEvent::TTEMU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTETAU=%lldLL",(long long)MyEvent::TTETAU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTMUMU=%lldLL",(long long)MyEvent::TTMUMU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTMUTAU=%lldLL",(long long)MyEvent::TTMUTAU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLTTChannel),-1,-2,1,G__FastAllocString(4096).Format("TTTAUTAU=%lldLL",(long long)MyEvent::TTTAUTAU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLZChannel),-1,-2,1,G__FastAllocString(4096).Format("ZUNKNOWN=%lldLL",(long long)MyEvent::ZUNKNOWN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLZChannel),-1,-2,1,G__FastAllocString(4096).Format("ZEE=%lldLL",(long long)MyEvent::ZEE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLZChannel),-1,-2,1,G__FastAllocString(4096).Format("ZMUMU=%lldLL",(long long)MyEvent::ZMUMU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLZChannel),-1,-2,1,G__FastAllocString(4096).Format("ZTAUTAU=%lldLL",(long long)MyEvent::ZTAUTAU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLZChannel),-1,-2,1,G__FastAllocString(4096).Format("ZQQ=%lldLL",(long long)MyEvent::ZQQ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLWChannel),-1,-2,1,G__FastAllocString(4096).Format("WUNKNOWN=%lldLL",(long long)MyEvent::WUNKNOWN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLWChannel),-1,-2,1,G__FastAllocString(4096).Format("WENU=%lldLL",(long long)MyEvent::WENU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLWChannel),-1,-2,1,G__FastAllocString(4096).Format("WMUNU=%lldLL",(long long)MyEvent::WMUNU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLWChannel),-1,-2,1,G__FastAllocString(4096).Format("WTAUNU=%lldLL",(long long)MyEvent::WTAUNU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyEventcLcLWChannel),-1,-2,1,G__FastAllocString(4096).Format("WQQ=%lldLL",(long long)MyEvent::WQQ).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runNb)-(long)(p)),104,0,0,-1,-1,-1,1,"runNb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventNb)-(long)(p)),104,0,0,-1,-1,-1,1,"eventNb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumiblock)-(long)(p)),105,0,0,-1,-1,-1,1,"lumiblock=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Electrons)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR),G__defined_typename("vector<MyElectron>"),-1,1,"Electrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Muons)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR),G__defined_typename("vector<MyMuon>"),-1,1,"Muons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR),G__defined_typename("vector<MyJet>"),-1,1,"Jets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Taus)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR),G__defined_typename("vector<MyTau>"),-1,1,"Taus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR),G__defined_typename("vector<MyMET>"),-1,1,"mets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PrimaryVtxs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),G__defined_typename("vector<MyVertex>"),-1,1,"PrimaryVtxs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcParticles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR),G__defined_typename("vector<MyMCParticle>"),-1,1,"mcParticles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->KineFitParticles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR),G__defined_typename("vector<MyKineFitParticle>"),-1,1,"KineFitParticles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcMET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyMET),-1,-1,1,"mcMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sampleInfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_SampleInfo),-1,-1,1,"sampleInfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isData)-(long)(p)),103,0,0,-1,-1,-1,1,"isData=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hlt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,1,"hlt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventQuality)-(long)(p)),105,0,0,-1,-1,-1,1,"eventQuality=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyElectron,allocator<MyElectron> > */
static void G__setup_memvarvectorlEMyElectroncOallocatorlEMyElectrongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   { vector<MyElectron,allocator<MyElectron> > *p; p=(vector<MyElectron,allocator<MyElectron> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyMuon,allocator<MyMuon> > */
static void G__setup_memvarvectorlEMyMuoncOallocatorlEMyMuongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   { vector<MyMuon,allocator<MyMuon> > *p; p=(vector<MyMuon,allocator<MyMuon> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyJet,allocator<MyJet> > */
static void G__setup_memvarvectorlEMyJetcOallocatorlEMyJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   { vector<MyJet,allocator<MyJet> > *p; p=(vector<MyJet,allocator<MyJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyTau,allocator<MyTau> > */
static void G__setup_memvarvectorlEMyTaucOallocatorlEMyTaugRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   { vector<MyTau,allocator<MyTau> > *p; p=(vector<MyTau,allocator<MyTau> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyMET,allocator<MyMET> > */
static void G__setup_memvarvectorlEMyMETcOallocatorlEMyMETgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   { vector<MyMET,allocator<MyMET> > *p; p=(vector<MyMET,allocator<MyMET> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyVertex,allocator<MyVertex> > */
static void G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   { vector<MyVertex,allocator<MyVertex> > *p; p=(vector<MyVertex,allocator<MyVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyMCParticle,allocator<MyMCParticle> > */
static void G__setup_memvarvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   { vector<MyMCParticle,allocator<MyMCParticle> > *p; p=(vector<MyMCParticle,allocator<MyMCParticle> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyKineFitParticle,allocator<MyKineFitParticle> > */
static void G__setup_memvarvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   { vector<MyKineFitParticle,allocator<MyKineFitParticle> > *p; p=(vector<MyKineFitParticle,allocator<MyKineFitParticle> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* Reader */
static void G__setup_memvarReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_Reader));
   { Reader *p; p=(Reader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TTree),-1,-1,4,"myTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_MyEvent),-1,-1,4,"myEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* BtagSF */
static void G__setup_memvarBtagSF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_BtagSF));
   { BtagSF *p; p=(BtagSF*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_BtagSFcLcLdA),-1,-2,1,G__FastAllocString(4096).Format("kNo=%lldLL",(long long)BtagSF::kNo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_BtagSFcLcLdA),-1,-2,1,G__FastAllocString(4096).Format("kDown=%lldLL",(long long)BtagSF::kDown).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_BtagSFcLcLdA),-1,-2,1,G__FastAllocString(4096).Format("kUp=%lldLL",(long long)BtagSF::kUp).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TRandom3),-1,-1,4,"randm=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SVEffUnc */
static void G__setup_memvarSVEffUnc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_SVEffUnc));
   { SVEffUnc *p; p=(SVEffUnc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* UncertaintyComputer */
static void G__setup_memvarUncertaintyComputer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer));
   { UncertaintyComputer *p; p=(UncertaintyComputer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_BtagSF),-1,-1,4,"btsf=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputercLcLBVariation),-1,-2,4,"kNo=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputercLcLBVariation),-1,-2,4,"kDown=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputercLcLBVariation),-1,-2,4,"kUp=2LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_SVEffUnc),-1,-1,4,"sveffunc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ObjectSelector */
static void G__setup_memvarObjectSelector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_ObjectSelector));
   { ObjectSelector *p; p=(ObjectSelector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"ZMAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"ZTAUMAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JET_PT_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JET_ETA_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JET_LTK_PT_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JET_BTAGGING_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JET_EMF_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JET_LTK_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JET_LEPTON_DRMIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"E_RELISO_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"E_ETA_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"E_D0_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"E_PT_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"E_ET_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"RHO_AEFF_E_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_E_RELISO_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_E_ETA_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_E_D0_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_E_ET_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"M_RELISO_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"M_ETA_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"M_D0_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"M_PT_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"RHO_AEFF_M_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_M_RELISO_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_M_ETA_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_M_D0_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"LOOSE_M_PT_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"TAU_ETA_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"TAU_D0_MAX_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"TAU_PT_MIN_=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"HPS_ISO_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"defaultSelection_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HistogramPlotter */
static void G__setup_memvarHistogramPlotter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_HistogramPlotter));
   { HistogramPlotter *p; p=(HistogramPlotter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),G__defined_typename("map<TString,TH1*>"),-1,4,"histos1_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR),G__defined_typename("map<TString,TH2*>"),-1,4,"histos2_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyTrack,allocator<MyTrack> > */
static void G__setup_memvarvectorlEMyTrackcOallocatorlEMyTrackgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   { vector<MyTrack,allocator<MyTrack> > *p; p=(vector<MyTrack,allocator<MyTrack> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvareventdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMyJet(void) {
   /* MyJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet));
   G__memfunc_setup("MyJet",489,G__eventdict_495_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 0, 0, 5, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_495_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_495_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_495_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_495_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_495_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_495_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_495_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_495_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_495_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_495_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_495_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_495_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_495_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyJet", 489, G__eventdict_495_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 0, 1, 1, 1, 0, "u 'MyJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyJet", 615, G__eventdict_495_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_495_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 1, 1, 1, 0, "u 'MyJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyMET(void) {
   /* MyMET */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyMET));
   G__memfunc_setup("MyMET",428,G__eventdict_500_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyMET), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_500_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_500_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyMET::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_500_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMET::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_500_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyMET::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_500_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyMET::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_500_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_500_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_500_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_500_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_500_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMET::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_500_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMET::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_500_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMET::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_500_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMET::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyMET", 428, G__eventdict_500_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyMET), -1, 0, 1, 1, 1, 0, "u 'MyMET' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyMET", 554, G__eventdict_500_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_500_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyMET), -1, 1, 1, 1, 1, 0, "u 'MyMET' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyTrack(void) {
   /* MyTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrack));
   G__memfunc_setup("MyTrack",699,G__eventdict_501_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_501_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_501_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_501_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_501_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_501_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_501_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_501_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_501_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_501_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_501_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_501_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_501_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_501_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyTrack", 699, G__eventdict_501_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyTrack), -1, 0, 1, 1, 1, 0, "u 'MyTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyTrack", 825, G__eventdict_501_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_501_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyTrack), -1, 1, 1, 1, 1, 0, "u 'MyTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyVertex(void) {
   /* MyVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   G__memfunc_setup("MyVertex",836,G__eventdict_502_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_502_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_502_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_502_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_502_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_502_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_502_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_502_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_502_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_502_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_502_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_502_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_502_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_502_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyVertex", 836, G__eventdict_502_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyVertex", 962, G__eventdict_502_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_502_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyElectron(void) {
   /* MyElectron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   G__memfunc_setup("MyElectron",1026,G__eventdict_503_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_503_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__eventdict_503_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_503_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyElectron::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_503_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyElectron::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_503_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyElectron::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_503_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyElectron::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_503_0_8, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_503_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_503_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_503_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_503_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyElectron::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_503_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyElectron::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_503_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyElectron::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_503_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyElectron::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyElectron", 1026, G__eventdict_503_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 0, 1, 1, 1, 0, "u 'MyElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyElectron", 1152, G__eventdict_503_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_503_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 1, 1, 1, 0, "u 'MyElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyMuon(void) {
   /* MyMuon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   G__memfunc_setup("MyMuon",613,G__eventdict_504_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_504_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__eventdict_504_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_504_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyMuon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_504_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMuon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_504_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyMuon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_504_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyMuon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_504_0_8, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_504_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_504_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_504_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_504_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMuon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_504_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMuon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_504_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMuon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_504_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMuon::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyMuon", 613, G__eventdict_504_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 0, 1, 1, 1, 0, "u 'MyMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyMuon", 739, G__eventdict_504_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_504_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 1, 1, 1, 0, "u 'MyMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyTau(void) {
   /* MyTau */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyTau));
   G__memfunc_setup("MyTau",496,G__eventdict_505_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyTau), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_505_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlgoName",1060,G__eventdict_505_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_505_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyTau::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_505_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTau::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_505_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyTau::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_505_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyTau::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_505_0_8, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_505_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_505_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_505_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_505_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTau::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_505_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTau::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_505_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTau::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_505_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTau::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyTau", 496, G__eventdict_505_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyTau), -1, 0, 1, 1, 1, 0, "u 'MyTau' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyTau", 622, G__eventdict_505_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_505_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyTau), -1, 1, 1, 1, 1, 0, "u 'MyTau' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyMCParticle(void) {
   /* MyMCParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyMCParticle));
   G__memfunc_setup("MyMCParticle",1162,G__eventdict_506_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_506_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_506_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyMCParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_506_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMCParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_506_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyMCParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_506_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyMCParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_506_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_506_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_506_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_506_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_506_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMCParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_506_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMCParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_506_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMCParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_506_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMCParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyMCParticle", 1162, G__eventdict_506_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), -1, 0, 1, 1, 1, 0, "u 'MyMCParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyMCParticle", 1288, G__eventdict_506_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_506_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), -1, 1, 1, 1, 1, 0, "u 'MyMCParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSampleInfo(void) {
   /* SampleInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_SampleInfo));
   G__memfunc_setup("SampleInfo",1006,G__eventdict_511_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_SampleInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_511_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SampleInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_511_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SampleInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_511_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SampleInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_511_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SampleInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_511_0_6, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_511_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_511_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_511_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_511_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SampleInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_511_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SampleInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_511_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SampleInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_511_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SampleInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SampleInfo", 1006, G__eventdict_511_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_SampleInfo), -1, 0, 1, 1, 1, 0, "u 'SampleInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SampleInfo", 1132, G__eventdict_511_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_511_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_SampleInfo), -1, 1, 1, 1, 1, 0, "u 'SampleInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyKineFitParticle(void) {
   /* MyKineFitParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle));
   G__memfunc_setup("MyKineFitParticle",1700,G__eventdict_512_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_512_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_512_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyKineFitParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_512_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyKineFitParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_512_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyKineFitParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_512_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyKineFitParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_512_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_512_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_512_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_512_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_512_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyKineFitParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_512_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyKineFitParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_512_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyKineFitParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_512_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyKineFitParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyKineFitParticle", 1700, G__eventdict_512_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), -1, 0, 1, 1, 1, 0, "u 'MyKineFitParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyKineFitParticle", 1826, G__eventdict_512_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_512_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), -1, 1, 1, 1, 1, 0, "u 'MyKineFitParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyEvent(void) {
   /* MyEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvent));
   G__memfunc_setup("MyEvent",712,G__eventdict_513_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_513_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_513_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_513_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_513_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_513_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_513_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_513_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_513_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_513_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_513_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_513_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_513_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_513_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyEvent", 712, G__eventdict_513_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyEvent), -1, 0, 1, 1, 1, 0, "u 'MyEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyEvent", 838, G__eventdict_513_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_513_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyEvent), -1, 1, 1, 1, 1, 0, "u 'MyEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyElectroncOallocatorlEMyElectrongRsPgR(void) {
   /* vector<MyElectron,allocator<MyElectron> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_519_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_519_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_519_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_519_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_519_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_519_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_519_0_7, 107, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_519_0_8, 107, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_519_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_519_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - sz u 'MyElectron' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_519_0_11, 107, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_519_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_519_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_519_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_519_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_519_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n u 'MyElectron' - 11 'MyElectron()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_519_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_519_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - first u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_519_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_519_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_519_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_519_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_519_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_519_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_519_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_519_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - first "
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_519_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n "
"u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_519_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_519_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_519_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - first u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_519_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyElectron,allocator<MyElectron> >", 4118, G__eventdict_519_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyMuoncOallocatorlEMyMuongRsPgR(void) {
   /* vector<MyMuon,allocator<MyMuon> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_523_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_523_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_523_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_523_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_523_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_523_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_523_0_7, 107, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_523_0_8, 107, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_523_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_523_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - sz u 'MyMuon' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_523_0_11, 107, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_523_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_523_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_523_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_523_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_523_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n u 'MyMuon' - 11 'MyMuon()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_523_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_523_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - first u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_523_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_523_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_523_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_523_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_523_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_523_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_523_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_523_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - first "
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_523_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n "
"u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_523_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_523_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_523_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - first u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_523_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyMuon,allocator<MyMuon> >", 3292, G__eventdict_523_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyJetcOallocatorlEMyJetgRsPgR(void) {
   /* vector<MyJet,allocator<MyJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_527_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_527_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_527_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_527_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_527_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyJet,allocator<MyJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_527_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyJet,allocator<MyJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_527_0_7, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_527_0_8, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_527_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_527_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - sz u 'MyJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_527_0_11, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_527_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_527_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_527_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_527_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_527_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n u 'MyJet' - 11 'MyJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_527_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_527_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - first u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_527_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_527_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_527_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_527_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_527_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_527_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_527_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_527_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - first "
"u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_527_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n "
"u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_527_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_527_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_527_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - first u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_527_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyJet,allocator<MyJet> >", 3044, G__eventdict_527_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyTaucOallocatorlEMyTaugRsPgR(void) {
   /* vector<MyTau,allocator<MyTau> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR));
   G__memfunc_setup("at",213,G__eventdict_531_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyTau), G__defined_typename("vector<MyTau,allocator<MyTau> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_531_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyTau), G__defined_typename("vector<MyTau,allocator<MyTau> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_531_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_531_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_531_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTau,allocator<MyTau> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_531_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTau,allocator<MyTau> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_531_0_7, 107, -1, G__defined_typename("vector<MyTau,allocator<MyTau> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_531_0_8, 107, -1, G__defined_typename("vector<MyTau,allocator<MyTau> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_531_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_531_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - sz u 'MyTau' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_531_0_11, 107, -1, G__defined_typename("vector<MyTau,allocator<MyTau> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_531_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_531_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyTau), G__defined_typename("vector<MyTau,allocator<MyTau> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_531_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyTau), G__defined_typename("vector<MyTau,allocator<MyTau> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTau,allocator<MyTau> >",2932,G__eventdict_531_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTau,allocator<MyTau> >",2932,G__eventdict_531_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - n u 'MyTau' - 11 'MyTau()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTau,allocator<MyTau> >",2932,G__eventdict_531_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyTau,allocator<MyTau> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTau,allocator<MyTau> >",2932,G__eventdict_531_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTau,allocator<MyTau> >::iterator' 'vector<MyTau,allocator<MyTau> >::const_iterator' 10 - first u 'vector<MyTau,allocator<MyTau> >::iterator' 'vector<MyTau,allocator<MyTau> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_531_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyTau,allocator<MyTau> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_531_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_531_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyTau), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_531_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyTau), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_531_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyTau' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_531_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTau,allocator<MyTau> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_531_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTau,allocator<MyTau> >::iterator' - 0 - position u 'MyTau' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_531_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTau,allocator<MyTau> >::iterator' - 0 - position u 'vector<MyTau,allocator<MyTau> >::iterator' 'vector<MyTau,allocator<MyTau> >::const_iterator' 10 - first "
"u 'vector<MyTau,allocator<MyTau> >::iterator' 'vector<MyTau,allocator<MyTau> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_531_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTau,allocator<MyTau> >::iterator' - 0 - position k - 'vector<MyTau,allocator<MyTau> >::size_type' 0 - n "
"u 'MyTau' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_531_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_531_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTau,allocator<MyTau> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_531_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTau,allocator<MyTau> >::iterator' - 0 - first u 'vector<MyTau,allocator<MyTau> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_531_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyTau,allocator<MyTau> >", 3058, G__eventdict_531_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyMETcOallocatorlEMyMETgRsPgR(void) {
   /* vector<MyMET,allocator<MyMET> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_535_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyMET), G__defined_typename("vector<MyMET,allocator<MyMET> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_535_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyMET), G__defined_typename("vector<MyMET,allocator<MyMET> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_535_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_535_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_535_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMET,allocator<MyMET> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_535_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMET,allocator<MyMET> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_535_0_7, 107, -1, G__defined_typename("vector<MyMET,allocator<MyMET> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_535_0_8, 107, -1, G__defined_typename("vector<MyMET,allocator<MyMET> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_535_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_535_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - sz u 'MyMET' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_535_0_11, 107, -1, G__defined_typename("vector<MyMET,allocator<MyMET> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_535_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_535_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyMET), G__defined_typename("vector<MyMET,allocator<MyMET> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_535_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyMET), G__defined_typename("vector<MyMET,allocator<MyMET> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMET,allocator<MyMET> >",2796,G__eventdict_535_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMET,allocator<MyMET> >",2796,G__eventdict_535_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - n u 'MyMET' - 11 'MyMET()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMET,allocator<MyMET> >",2796,G__eventdict_535_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyMET,allocator<MyMET> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMET,allocator<MyMET> >",2796,G__eventdict_535_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMET,allocator<MyMET> >::iterator' 'vector<MyMET,allocator<MyMET> >::const_iterator' 10 - first u 'vector<MyMET,allocator<MyMET> >::iterator' 'vector<MyMET,allocator<MyMET> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_535_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyMET,allocator<MyMET> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_535_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_535_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyMET), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_535_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyMET), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_535_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyMET' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_535_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMET,allocator<MyMET> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_535_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMET,allocator<MyMET> >::iterator' - 0 - position u 'MyMET' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_535_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMET,allocator<MyMET> >::iterator' - 0 - position u 'vector<MyMET,allocator<MyMET> >::iterator' 'vector<MyMET,allocator<MyMET> >::const_iterator' 10 - first "
"u 'vector<MyMET,allocator<MyMET> >::iterator' 'vector<MyMET,allocator<MyMET> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_535_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMET,allocator<MyMET> >::iterator' - 0 - position k - 'vector<MyMET,allocator<MyMET> >::size_type' 0 - n "
"u 'MyMET' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_535_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_535_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMET,allocator<MyMET> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_535_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMET,allocator<MyMET> >::iterator' - 0 - first u 'vector<MyMET,allocator<MyMET> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_535_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyMET,allocator<MyMET> >", 2922, G__eventdict_535_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   /* vector<MyVertex,allocator<MyVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_539_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_539_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_539_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_539_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_539_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_539_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_539_0_7, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_539_0_8, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_539_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_539_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz u 'MyVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_539_0_11, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_539_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_539_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_539_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_539_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_539_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n u 'MyVertex' - 11 'MyVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_539_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_539_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_539_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_539_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_539_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_539_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_539_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_539_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_539_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_539_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first "
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_539_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n "
"u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_539_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_539_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_539_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_539_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyVertex,allocator<MyVertex> >", 3738, G__eventdict_539_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR(void) {
   /* vector<MyMCParticle,allocator<MyMCParticle> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR));
   G__memfunc_setup("at",213,G__eventdict_543_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_543_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_543_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_543_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_543_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_543_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_543_0_7, 107, -1, G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_543_0_8, 107, -1, G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_543_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_543_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - sz u 'MyMCParticle' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_543_0_11, 107, -1, G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_543_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_543_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_543_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), G__defined_typename("vector<MyMCParticle,allocator<MyMCParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMCParticle,allocator<MyMCParticle> >",4264,G__eventdict_543_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMCParticle,allocator<MyMCParticle> >",4264,G__eventdict_543_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - n u 'MyMCParticle' - 11 'MyMCParticle()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMCParticle,allocator<MyMCParticle> >",4264,G__eventdict_543_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyMCParticle,allocator<MyMCParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMCParticle,allocator<MyMCParticle> >",4264,G__eventdict_543_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' 'vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator' 10 - first u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' 'vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_543_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyMCParticle,allocator<MyMCParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_543_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_543_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_543_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyMCParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_543_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyMCParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_543_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMCParticle,allocator<MyMCParticle> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_543_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' - 0 - position u 'MyMCParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_543_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' - 0 - position u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' 'vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator' 10 - first "
"u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' 'vector<MyMCParticle,allocator<MyMCParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_543_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' - 0 - position k - 'vector<MyMCParticle,allocator<MyMCParticle> >::size_type' 0 - n "
"u 'MyMCParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_543_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_543_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_543_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' - 0 - first u 'vector<MyMCParticle,allocator<MyMCParticle> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_543_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyMCParticle,allocator<MyMCParticle> >", 4390, G__eventdict_543_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR(void) {
   /* vector<MyKineFitParticle,allocator<MyKineFitParticle> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR));
   G__memfunc_setup("at",213,G__eventdict_547_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_547_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_547_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_547_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_547_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_547_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_547_0_7, 107, -1, G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_547_0_8, 107, -1, G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_547_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_547_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - sz u 'MyKineFitParticle' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_547_0_11, 107, -1, G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_547_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_547_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_547_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), G__defined_typename("vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyKineFitParticle,allocator<MyKineFitParticle> >",5340,G__eventdict_547_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyKineFitParticle,allocator<MyKineFitParticle> >",5340,G__eventdict_547_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - n u 'MyKineFitParticle' - 11 'MyKineFitParticle()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyKineFitParticle,allocator<MyKineFitParticle> >",5340,G__eventdict_547_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyKineFitParticle,allocator<MyKineFitParticle> >",5340,G__eventdict_547_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator' 10 - first u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_547_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_547_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_547_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_547_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyKineFitParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_547_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyKineFitParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_547_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_547_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' - 0 - position u 'MyKineFitParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_547_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' - 0 - position u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator' 10 - first "
"u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_547_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' - 0 - position k - 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::size_type' 0 - n "
"u 'MyKineFitParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_547_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_547_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_547_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' - 0 - first u 'vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_547_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyKineFitParticle,allocator<MyKineFitParticle> >", 5466, G__eventdict_547_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncReader(void) {
   /* Reader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_Reader));
   G__memfunc_setup("Reader",595,G__eventdict_848_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_Reader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssignEventTreeFrom",1931,G__eventdict_848_0_2, 104, -1, -1, 0, 2, 1, 1, 0, 
"U 'TFile' - 0 - f u 'TString' - 0 '\"myMiniTreeProducer\"' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssignEventTreeFromList",2343,G__eventdict_848_0_3, 104, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - file_list_name u 'TString' - 0 '\"myMiniTreeProducer\"' path", "for more than one files", (void*) NULL, 0);
   G__memfunc_setup("GetNewEvent",1100,G__eventdict_848_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_MyEvent), -1, 0, 1, 1, 1, 0, "h - - 0 - ientry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNewEventFromList",1916,G__eventdict_848_0_5, 85, G__get_linked_tagnum(&G__eventdictLN_MyEvent), -1, 0, 1, 1, 1, 0, "h - - 0 - ientry", "for more than one files", (void*) NULL, 0);
   G__memfunc_setup("LoadTree",784,G__eventdict_848_0_6, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getJets",726,G__eventdict_848_0_7, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), G__defined_typename("vector<MyJet>"), 0, 2, 1, 1, 0, 
"U 'MyEvent' - 0 - ev u 'string' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElectrons",1263,G__eventdict_848_0_8, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), G__defined_typename("vector<MyElectron>"), 0, 2, 1, 1, 0, 
"U 'MyEvent' - 0 - ev u 'string' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMuons",850,G__eventdict_848_0_9, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), G__defined_typename("vector<MyMuon>"), 0, 2, 1, 1, 0, 
"U 'MyEvent' - 0 - ev u 'string' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTaus",733,G__eventdict_848_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR), G__defined_typename("vector<MyTau>"), 0, 2, 1, 1, 0, 
"U 'MyEvent' - 0 - ev u 'string' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMET",550,G__eventdict_848_0_11, 117, G__get_linked_tagnum(&G__eventdictLN_MyMET), -1, 0, 2, 1, 1, 0, 
"U 'MyEvent' - 0 - ev u 'string' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_848_0_12, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Reader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_848_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Reader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_848_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Reader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_848_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Reader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_848_0_16, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_848_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_848_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_848_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_848_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Reader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_848_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Reader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_848_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Reader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_848_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Reader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Reader", 595, G__eventdict_848_0_24, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_Reader), -1, 0, 1, 1, 1, 0, "u 'Reader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Reader", 721, G__eventdict_848_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_848_0_26, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_Reader), -1, 1, 1, 1, 1, 0, "u 'Reader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBtagSF(void) {
   /* BtagSF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_BtagSF));
   G__memfunc_setup("BtagSF",535,G__eventdict_868_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_BtagSF), -1, 0, 1, 1, 1, 0, "i - - 0 '0' seed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isbtagged",938,G__eventdict_868_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"f - 'Float_t' 0 - pt f - 'Float_t' 0 - eta "
"f - 'Float_t' 0 - csv i - 'Int_t' 0 - jetflavor "
"g - 'Bool_t' 0 - isdata h - 'UInt_t' 0 - btagsys "
"h - 'UInt_t' 0 - mistagsys g - 'Bool_t' 0 - is2012", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSFb",571,G__eventdict_868_0_3, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - pt h - 'UInt_t' 0 - btagsys "
"g - 'Bool_t' 0 - is2012", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSFc",572,G__eventdict_868_0_4, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - pt h - 'UInt_t' 0 - btagsys "
"g - 'Bool_t' 0 - is2012", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSFl",581,G__eventdict_868_0_5, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - pt f - 'Float_t' 0 - eta "
"h - 'UInt_t' 0 - mistagsys g - 'Bool_t' 0 - is2012", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMistag",933,G__eventdict_868_0_6, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - pt f - 'Float_t' 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_868_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BtagSF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_868_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BtagSF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_868_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BtagSF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_868_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BtagSF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_868_0_11, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_868_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_868_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_868_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_868_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BtagSF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_868_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BtagSF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_868_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BtagSF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_868_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BtagSF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BtagSF", 535, G__eventdict_868_0_19, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_BtagSF), -1, 0, 1, 1, 1, 0, "u 'BtagSF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BtagSF", 661, G__eventdict_868_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_868_0_21, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_BtagSF), -1, 1, 1, 1, 1, 0, "u 'BtagSF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSVEffUnc(void) {
   /* SVEffUnc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_SVEffUnc));
   G__memfunc_setup("SVEffUnc",736,G__eventdict_870_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_SVEffUnc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUncC",681,G__eventdict_870_0_2, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUncL",690,G__eventdict_870_0_3, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - pt f - 'Float_t' 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_870_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SVEffUnc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_870_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SVEffUnc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_870_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SVEffUnc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_870_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SVEffUnc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_870_0_8, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_870_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_870_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_870_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_870_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SVEffUnc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_870_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SVEffUnc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_870_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SVEffUnc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_870_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SVEffUnc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SVEffUnc", 736, G__eventdict_870_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_SVEffUnc), -1, 0, 1, 1, 1, 0, "u 'SVEffUnc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SVEffUnc", 862, G__eventdict_870_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_870_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_SVEffUnc), -1, 1, 1, 1, 1, 0, "u 'SVEffUnc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncUncertaintyComputer(void) {
   /* UncertaintyComputer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer));
   G__memfunc_setup("UncertaintyComputer",2021,G__eventdict_871_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("metWithJES",964,G__eventdict_871_0_2, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >' 'vector<MyJet>' 11 - vJ U 'vector<int,allocator<int> >' 'vector<int>' 0 - j "
"u 'MyMET' - 0 - MET i - - 0 '0' jes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("metWithJER",963,G__eventdict_871_0_3, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >' 'vector<MyJet>' 11 - vJ U 'vector<int,allocator<int> >' 'vector<int>' 0 - j "
"u 'MyMET' - 0 - MET i - - 0 '0' jer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("metWithJESJER",1189,G__eventdict_871_0_4, 100, -1, -1, 0, 5, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >' 'vector<MyJet>' 11 - vJ U 'vector<int,allocator<int> >' 'vector<int>' 0 - j "
"u 'MyMET' - 0 - MET i - - 0 '0' jes "
"i - - 0 '0' jer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("metWithUncl",1140,G__eventdict_871_0_5, 100, -1, -1, 0, 8, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >' 'vector<MyJet>' 11 - vJ U 'vector<int,allocator<int> >' 'vector<int>' 0 - j "
"u 'vector<MyMuon,allocator<MyMuon> >' 'vector<MyMuon>' 11 - vMu U 'vector<int,allocator<int> >' 'vector<int>' 0 - m "
"u 'vector<MyElectron,allocator<MyElectron> >' 'vector<MyElectron>' 11 - vEle U 'vector<int,allocator<int> >' 'vector<int>' 0 - el "
"u 'MyMET' - 0 - MET i - - 0 '0' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getJERSF",698,G__eventdict_871_0_6, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - eta i - - 0 '0' jer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("jetPtWithJESJER",1382,G__eventdict_871_0_7, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'MyJet' - 0 - jet i - - 0 '0' jes "
"i - - 0 '0' jer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBtagWithSF",1267,G__eventdict_871_0_8, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'MyJet' - 0 - jet g - - 0 - isData "
"i - - 0 - scale g - - 0 - is2012", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EffUncOnSV",925,G__eventdict_871_0_9, 100, -1, -1, 0, 1, 1, 1, 0, "u 'MyJet' - 0 - jet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_871_0_10, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&UncertaintyComputer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_871_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UncertaintyComputer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_871_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&UncertaintyComputer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_871_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&UncertaintyComputer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_871_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_871_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_871_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_871_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_871_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UncertaintyComputer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_871_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UncertaintyComputer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_871_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UncertaintyComputer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_871_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UncertaintyComputer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("UncertaintyComputer", 2021, G__eventdict_871_0_22, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer), -1, 0, 1, 1, 1, 0, "u 'UncertaintyComputer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~UncertaintyComputer", 2147, G__eventdict_871_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_871_0_24, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_UncertaintyComputer), -1, 1, 1, 1, 1, 0, "u 'UncertaintyComputer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncObjectSelector(void) {
   /* ObjectSelector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_ObjectSelector));
   G__memfunc_setup("ObjectSelector",1432,G__eventdict_873_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_ObjectSelector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaultSelection",1975,G__eventdict_873_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("preSelectElectrons",1878,G__eventdict_873_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - e_i u 'vector<MyElectron,allocator<MyElectron> >' 'vector<MyElectron>' 11 - vE "
"u 'MyVertex' - 1 - vertex g - - 0 'false' isPFlow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("preSelectMuons",1465,G__eventdict_873_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - m_i u 'vector<MyMuon,allocator<MyMuon> >' 'vector<MyMuon>' 11 - vM "
"u 'MyVertex' - 1 - vertex g - - 0 'false' isPFlow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("preSelectMuonsNoIso",1953,G__eventdict_873_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - m_i u 'vector<MyMuon,allocator<MyMuon> >' 'vector<MyMuon>' 11 - vM "
"u 'MyVertex' - 1 - vertex g - - 0 'false' isPFlow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("preSelectJets",1341,G__eventdict_873_0_6, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'string' - 0 - jetAlgo U 'vector<int,allocator<int> >' 'vector<int>' 0 - j_i "
"u 'vector<MyJet,allocator<MyJet> >' 'vector<MyJet>' 11 - vJ i - - 0 '0' jes "
"i - - 0 '0' jer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("preSelectTaus",1348,G__eventdict_873_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - t_i u 'vector<MyTau,allocator<MyTau> >' 'vector<MyTau>' 11 - vT "
"i - - 0 - requiredProngs u 'string' - 0 - type "
"u 'MyVertex' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("looseElectronVeto",1788,G__eventdict_873_0_8, 103, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - selectedElectron u 'vector<MyElectron,allocator<MyElectron> >' 'vector<MyElectron>' 11 - vE "
"g - - 0 'false' isPFlow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("looseMuonVeto",1375,G__eventdict_873_0_9, 103, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - selectedMuon u 'vector<MyMuon,allocator<MyMuon> >' 'vector<MyMuon>' 11 - vM "
"g - - 0 'false' isPFlow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ElectronCleaning",1629,G__eventdict_873_0_10, 121, -1, -1, 0, 6, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >' 'vector<MyElectron>' 11 - vE u 'vector<MyMuon,allocator<MyMuon> >' 'vector<MyMuon>' 11 - vM "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - e_old U 'vector<int,allocator<int> >' 'vector<int>' 0 - e_new "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - mu d - - 0 - DR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TauCleaning",1099,G__eventdict_873_0_11, 121, -1, -1, 0, 8, 1, 1, 0, 
"u 'vector<MyTau,allocator<MyTau> >' 'vector<MyTau>' 11 - vT u 'vector<MyMuon,allocator<MyMuon> >' 'vector<MyMuon>' 11 - vM "
"u 'vector<MyElectron,allocator<MyElectron> >' 'vector<MyElectron>' 11 - vE U 'vector<int,allocator<int> >' 'vector<int>' 0 - t_old "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - t_new U 'vector<int,allocator<int> >' 'vector<int>' 0 - mu "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - el d - - 0 - DR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JetCleaning",1092,G__eventdict_873_0_12, 121, -1, -1, 0, 11, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >' 'vector<MyJet>' 11 - vJ u 'vector<MyMuon,allocator<MyMuon> >' 'vector<MyMuon>' 11 - vM "
"u 'vector<MyElectron,allocator<MyElectron> >' 'vector<MyElectron>' 11 - vE u 'vector<MyTau,allocator<MyTau> >' 'vector<MyTau>' 11 - vT "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - j_old U 'vector<int,allocator<int> >' 'vector<int>' 0 - j_new "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - mu U 'vector<int,allocator<int> >' 'vector<int>' 0 - el "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 - tau d - - 0 - DR "
"g - - 0 'false' cleanTaus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeltaR",572,G__eventdict_873_0_13, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' 'MyLorentzVector' 0 - aV u 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' 'MyLorentzVector' 0 - bV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_873_0_14, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ObjectSelector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_873_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ObjectSelector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_873_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ObjectSelector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_873_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ObjectSelector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_873_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_873_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ObjectSelector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_873_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ObjectSelector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_873_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ObjectSelector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_873_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ObjectSelector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ObjectSelector", 1432, G__eventdict_873_0_26, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_ObjectSelector), -1, 0, 1, 1, 1, 0, "u 'ObjectSelector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ObjectSelector", 1558, G__eventdict_873_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_873_0_28, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_ObjectSelector), -1, 1, 1, 1, 1, 0, "u 'ObjectSelector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistogramPlotter(void) {
   /* HistogramPlotter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_HistogramPlotter));
   G__memfunc_setup("HistogramPlotter",1688,G__eventdict_874_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_HistogramPlotter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHist",812,G__eventdict_874_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - dirname u 'TString' - 0 - parentDir "
"U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHisto",816,G__eventdict_874_0_3, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - dirname "
"i - - 0 - range d - - 0 - min "
"d - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add2DHisto",934,G__eventdict_874_0_4, 121, -1, -1, 0, 8, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - dirname "
"i - - 0 - range1 d - - 0 - min1 "
"d - - 0 - max1 i - - 0 - range2 "
"d - - 0 - min2 d - - 0 - max2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHisto",942,G__eventdict_874_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - dirname "
"d - - 0 - value d - - 0 '1.0' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHisto",839,G__eventdict_874_0_6, 85, G__get_linked_tagnum(&G__eventdictLN_TH1), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - dirname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_874_0_7, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HistogramPlotter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_874_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistogramPlotter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_874_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HistogramPlotter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_874_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HistogramPlotter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__eventdict_874_0_11, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__eventdict_874_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__eventdict_874_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_874_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_874_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistogramPlotter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_874_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistogramPlotter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_874_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistogramPlotter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_874_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistogramPlotter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HistogramPlotter", 1688, G__eventdict_874_0_19, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_HistogramPlotter), -1, 0, 1, 1, 1, 0, "u 'HistogramPlotter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HistogramPlotter", 1814, G__eventdict_874_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_874_0_21, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_HistogramPlotter), -1, 1, 1, 1, 1, 0, "u 'HistogramPlotter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyTrackcOallocatorlEMyTrackgRsPgR(void) {
   /* vector<MyTrack,allocator<MyTrack> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_892_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrack), G__defined_typename("vector<MyTrack,allocator<MyTrack> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_892_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrack), G__defined_typename("vector<MyTrack,allocator<MyTrack> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_892_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_892_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_892_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTrack,allocator<MyTrack> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_892_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTrack,allocator<MyTrack> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_892_0_7, 107, -1, G__defined_typename("vector<MyTrack,allocator<MyTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_892_0_8, 107, -1, G__defined_typename("vector<MyTrack,allocator<MyTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_892_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_892_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - sz u 'MyTrack' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_892_0_11, 107, -1, G__defined_typename("vector<MyTrack,allocator<MyTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_892_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_892_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrack), G__defined_typename("vector<MyTrack,allocator<MyTrack> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_892_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrack), G__defined_typename("vector<MyTrack,allocator<MyTrack> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrack,allocator<MyTrack> >",3338,G__eventdict_892_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrack,allocator<MyTrack> >",3338,G__eventdict_892_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - n u 'MyTrack' - 11 'MyTrack()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrack,allocator<MyTrack> >",3338,G__eventdict_892_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyTrack,allocator<MyTrack> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrack,allocator<MyTrack> >",3338,G__eventdict_892_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrack,allocator<MyTrack> >::iterator' 'vector<MyTrack,allocator<MyTrack> >::const_iterator' 10 - first u 'vector<MyTrack,allocator<MyTrack> >::iterator' 'vector<MyTrack,allocator<MyTrack> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_892_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyTrack,allocator<MyTrack> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_892_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_892_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_892_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_892_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_892_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTrack,allocator<MyTrack> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_892_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrack,allocator<MyTrack> >::iterator' - 0 - position u 'MyTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_892_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTrack,allocator<MyTrack> >::iterator' - 0 - position u 'vector<MyTrack,allocator<MyTrack> >::iterator' 'vector<MyTrack,allocator<MyTrack> >::const_iterator' 10 - first "
"u 'vector<MyTrack,allocator<MyTrack> >::iterator' 'vector<MyTrack,allocator<MyTrack> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_892_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTrack,allocator<MyTrack> >::iterator' - 0 - position k - 'vector<MyTrack,allocator<MyTrack> >::size_type' 0 - n "
"u 'MyTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_892_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_892_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTrack,allocator<MyTrack> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_892_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrack,allocator<MyTrack> >::iterator' - 0 - first u 'vector<MyTrack,allocator<MyTrack> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_892_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyTrack,allocator<MyTrack> >", 3464, G__eventdict_892_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunceventdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaleventdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funceventdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__eventdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__eventdictLN_ROOT = { "ROOT" , 110 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__eventdictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR = { "map<string,float,less<string>,allocator<pair<const string,float> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_ROOTcLcLMath = { "ROOT::Math" , 110 , -1 };
G__linked_taginfo G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR = { "ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR = { "ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyJet = { "MyJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR = { "vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyMET = { "MyMET" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyTrack = { "MyTrack" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyVertex = { "MyVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyElectron = { "MyElectron" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyMuon = { "MyMuon" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyTau = { "MyTau" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyMCParticle = { "MyMCParticle" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_SampleInfo = { "SampleInfo" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyKineFitParticle = { "MyKineFitParticle" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyEvent = { "MyEvent" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyEventcLcLSampleType = { "MyEvent::SampleType" , 101 , -1 };
G__linked_taginfo G__eventdictLN_MyEventcLcLTTChannel = { "MyEvent::TTChannel" , 101 , -1 };
G__linked_taginfo G__eventdictLN_MyEventcLcLZChannel = { "MyEvent::ZChannel" , 101 , -1 };
G__linked_taginfo G__eventdictLN_MyEventcLcLWChannel = { "MyEvent::WChannel" , 101 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR = { "vector<MyElectron,allocator<MyElectron> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator = { "vector<MyElectron,allocator<MyElectron> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyElectron,allocator<MyElectron> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR = { "vector<MyMuon,allocator<MyMuon> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator = { "vector<MyMuon,allocator<MyMuon> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyMuon,allocator<MyMuon> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR = { "vector<MyJet,allocator<MyJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator = { "vector<MyJet,allocator<MyJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyJet,allocator<MyJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR = { "vector<MyTau,allocator<MyTau> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiterator = { "vector<MyTau,allocator<MyTau> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyTau,allocator<MyTau> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR = { "vector<MyMET,allocator<MyMET> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiterator = { "vector<MyMET,allocator<MyMET> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyMET,allocator<MyMET> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR = { "vector<MyVertex,allocator<MyVertex> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator = { "vector<MyVertex,allocator<MyVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyVertex,allocator<MyVertex> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR = { "vector<MyMCParticle,allocator<MyMCParticle> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiterator = { "vector<MyMCParticle,allocator<MyMCParticle> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyMCParticle,allocator<MyMCParticle> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR = { "vector<MyKineFitParticle,allocator<MyKineFitParticle> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiterator = { "vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyKineFitParticle,allocator<MyKineFitParticle> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_Reader = { "Reader" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TRandom3 = { "TRandom3" , 99 , -1 };
G__linked_taginfo G__eventdictLN_BtagSF = { "BtagSF" , 99 , -1 };
G__linked_taginfo G__eventdictLN_BtagSFcLcLdA = { "BtagSF::$" , 101 , -1 };
G__linked_taginfo G__eventdictLN_SVEffUnc = { "SVEffUnc" , 99 , -1 };
G__linked_taginfo G__eventdictLN_UncertaintyComputer = { "UncertaintyComputer" , 99 , -1 };
G__linked_taginfo G__eventdictLN_UncertaintyComputercLcLBVariation = { "UncertaintyComputer::BVariation" , 101 , -1 };
G__linked_taginfo G__eventdictLN_ObjectSelector = { "ObjectSelector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_HistogramPlotter = { "HistogramPlotter" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR = { "map<TString,TH1*,less<TString>,allocator<pair<const TString,TH1*> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR = { "map<TString,TH2*,less<TString>,allocator<pair<const TString,TH2*> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR = { "vector<MyTrack,allocator<MyTrack> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiterator = { "vector<MyTrack,allocator<MyTrack> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyTrack,allocator<MyTrack> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableeventdict() {
  G__eventdictLN_TClass.tagnum = -1 ;
  G__eventdictLN_TBuffer.tagnum = -1 ;
  G__eventdictLN_TMemberInspector.tagnum = -1 ;
  G__eventdictLN_TString.tagnum = -1 ;
  G__eventdictLN_ROOT.tagnum = -1 ;
  G__eventdictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__eventdictLN_string.tagnum = -1 ;
  G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__eventdictLN_TFile.tagnum = -1 ;
  G__eventdictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_ROOTcLcLMath.tagnum = -1 ;
  G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR.tagnum = -1 ;
  G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR.tagnum = -1 ;
  G__eventdictLN_MyJet.tagnum = -1 ;
  G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyMET.tagnum = -1 ;
  G__eventdictLN_MyTrack.tagnum = -1 ;
  G__eventdictLN_MyVertex.tagnum = -1 ;
  G__eventdictLN_MyElectron.tagnum = -1 ;
  G__eventdictLN_MyMuon.tagnum = -1 ;
  G__eventdictLN_MyTau.tagnum = -1 ;
  G__eventdictLN_MyMCParticle.tagnum = -1 ;
  G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_SampleInfo.tagnum = -1 ;
  G__eventdictLN_MyKineFitParticle.tagnum = -1 ;
  G__eventdictLN_MyEvent.tagnum = -1 ;
  G__eventdictLN_MyEventcLcLSampleType.tagnum = -1 ;
  G__eventdictLN_MyEventcLcLTTChannel.tagnum = -1 ;
  G__eventdictLN_MyEventcLcLZChannel.tagnum = -1 ;
  G__eventdictLN_MyEventcLcLWChannel.tagnum = -1 ;
  G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TH1.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__eventdictLN_TTree.tagnum = -1 ;
  G__eventdictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__eventdictLN_Reader.tagnum = -1 ;
  G__eventdictLN_TRandom3.tagnum = -1 ;
  G__eventdictLN_BtagSF.tagnum = -1 ;
  G__eventdictLN_BtagSFcLcLdA.tagnum = -1 ;
  G__eventdictLN_SVEffUnc.tagnum = -1 ;
  G__eventdictLN_UncertaintyComputer.tagnum = -1 ;
  G__eventdictLN_UncertaintyComputercLcLBVariation.tagnum = -1 ;
  G__eventdictLN_ObjectSelector.tagnum = -1 ;
  G__eventdictLN_HistogramPlotter.tagnum = -1 ;
  G__eventdictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableeventdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__eventdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TString);
   G__get_linked_tagnum_fwd(&G__eventdictLN_ROOT);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_string);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TFile);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_ROOTcLcLMath);
   G__get_linked_tagnum_fwd(&G__eventdictLN_ROOTcLcLMathcLcLPositionVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyJet),sizeof(MyJet),-1,263424,(char*)NULL,G__setup_memvarMyJet,G__setup_memfuncMyJet);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyMET),sizeof(MyMET),-1,263424,(char*)NULL,G__setup_memvarMyMET,G__setup_memfuncMyMET);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyTrack),sizeof(MyTrack),-1,263424,(char*)NULL,G__setup_memvarMyTrack,G__setup_memfuncMyTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyVertex),sizeof(MyVertex),-1,263424,(char*)NULL,G__setup_memvarMyVertex,G__setup_memfuncMyVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyElectron),sizeof(MyElectron),-1,263424,(char*)NULL,G__setup_memvarMyElectron,G__setup_memfuncMyElectron);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyMuon),sizeof(MyMuon),-1,263424,(char*)NULL,G__setup_memvarMyMuon,G__setup_memfuncMyMuon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyTau),sizeof(MyTau),-1,263424,(char*)NULL,G__setup_memvarMyTau,G__setup_memfuncMyTau);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyMCParticle),sizeof(MyMCParticle),-1,263424,(char*)NULL,G__setup_memvarMyMCParticle,G__setup_memfuncMyMCParticle);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_SampleInfo),sizeof(SampleInfo),-1,263424,(char*)NULL,G__setup_memvarSampleInfo,G__setup_memfuncSampleInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyKineFitParticle),sizeof(MyKineFitParticle),-1,263424,(char*)NULL,G__setup_memvarMyKineFitParticle,G__setup_memfuncMyKineFitParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyEvent),sizeof(MyEvent),-1,263424,(char*)NULL,G__setup_memvarMyEvent,G__setup_memfuncMyEvent);
   G__get_linked_tagnum_fwd(&G__eventdictLN_MyEventcLcLSampleType);
   G__get_linked_tagnum_fwd(&G__eventdictLN_MyEventcLcLTTChannel);
   G__get_linked_tagnum_fwd(&G__eventdictLN_MyEventcLcLZChannel);
   G__get_linked_tagnum_fwd(&G__eventdictLN_MyEventcLcLWChannel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR),sizeof(vector<MyElectron,allocator<MyElectron> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyElectroncOallocatorlEMyElectrongRsPgR,G__setup_memfuncvectorlEMyElectroncOallocatorlEMyElectrongRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR),sizeof(vector<MyMuon,allocator<MyMuon> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyMuoncOallocatorlEMyMuongRsPgR,G__setup_memfuncvectorlEMyMuoncOallocatorlEMyMuongRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR),sizeof(vector<MyJet,allocator<MyJet> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyJetcOallocatorlEMyJetgRsPgR,G__setup_memfuncvectorlEMyJetcOallocatorlEMyJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgR),sizeof(vector<MyTau,allocator<MyTau> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyTaucOallocatorlEMyTaugRsPgR,G__setup_memfuncvectorlEMyTaucOallocatorlEMyTaugRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyTaucOallocatorlEMyTaugRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgR),sizeof(vector<MyMET,allocator<MyMET> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyMETcOallocatorlEMyMETgRsPgR,G__setup_memfuncvectorlEMyMETcOallocatorlEMyMETgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyMETcOallocatorlEMyMETgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),sizeof(vector<MyVertex,allocator<MyVertex> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR,G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR),sizeof(vector<MyMCParticle,allocator<MyMCParticle> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR,G__setup_memfuncvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyMCParticlecOallocatorlEMyMCParticlegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR),sizeof(vector<MyKineFitParticle,allocator<MyKineFitParticle> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR,G__setup_memfuncvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyKineFitParticlecOallocatorlEMyKineFitParticlegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TH1);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TTree);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_Reader),sizeof(Reader),-1,263424,(char*)NULL,G__setup_memvarReader,G__setup_memfuncReader);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TRandom3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_BtagSF),sizeof(BtagSF),-1,263424,(char*)NULL,G__setup_memvarBtagSF,G__setup_memfuncBtagSF);
   G__get_linked_tagnum_fwd(&G__eventdictLN_BtagSFcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_SVEffUnc),sizeof(SVEffUnc),-1,263424,(char*)NULL,G__setup_memvarSVEffUnc,G__setup_memfuncSVEffUnc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_UncertaintyComputer),sizeof(UncertaintyComputer),-1,263424,(char*)NULL,G__setup_memvarUncertaintyComputer,G__setup_memfuncUncertaintyComputer);
   G__get_linked_tagnum_fwd(&G__eventdictLN_UncertaintyComputercLcLBVariation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_ObjectSelector),sizeof(ObjectSelector),-1,263424,(char*)NULL,G__setup_memvarObjectSelector,G__setup_memfuncObjectSelector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_HistogramPlotter),sizeof(HistogramPlotter),-1,263424,(char*)NULL,G__setup_memvarHistogramPlotter,G__setup_memfuncHistogramPlotter);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgR),sizeof(vector<MyTrack,allocator<MyTrack> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMyTrackcOallocatorlEMyTrackgRsPgR,G__setup_memfuncvectorlEMyTrackcOallocatorlEMyTrackgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackcOallocatorlEMyTrackgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupeventdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupeventdict()");
  G__set_cpp_environmenteventdict();
  G__cpp_setup_tagtableeventdict();

  G__cpp_setup_inheritanceeventdict();

  G__cpp_setup_typetableeventdict();

  G__cpp_setup_memvareventdict();

  G__cpp_setup_memfunceventdict();
  G__cpp_setup_globaleventdict();
  G__cpp_setup_funceventdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunceventdict();
  return;
}
class G__cpp_setup_initeventdict {
  public:
    G__cpp_setup_initeventdict() { G__add_setup_func("eventdict",(G__incsetup)(&G__cpp_setupeventdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initeventdict() { G__remove_setup_func("eventdict"); }
};
G__cpp_setup_initeventdict G__cpp_setup_initializereventdict;

